{"paper_id": "0ead8ba70e74385a1b6523b4775c356c6b884701", "metadata": {"title": "Object-oriented biological system integration: a SARS coronavirus example", "authors": [{"first": "Daniel", "middle": [], "last": "Shegogue", "suffix": "", "affiliation": {}, "email": ""}, {"first": "W", "middle": ["Jim"], "last": "Zheng", "suffix": "", "affiliation": {}, "email": ""}]}, "abstract": [{"text": "The importance of studying biology at the system level has been well recognized, yet there is no well-defined process or consistent methodology to integrate and represent biological information at this level. To overcome this hurdle, a blending of disciplines such as computer science and biology is necessary. Results: By applying an adapted, sequential software engineering process, a complex biological system (severe acquired respiratory syndrome-coronavirus viral infection) has been reverse-engineered and represented as an object-oriented software system. The scalability of this object-oriented software engineering approach indicates that we can apply this technology for the integration of large complex biological systems. Availability: A navigable web-based version of the system is freely available at", "cite_spans": [], "ref_spans": [], "section": "Abstract"}], "body_text": [{"text": "A paradigm shift is occurring with the study of individual cellular components progressing toward the study of the cell at the system level (Ideker et al., 2001) . However, no well-defined process or effective integration methodology, in combination with a widely accepted system representation has been developed to provide a comprehensive view of a biological system. Biological systems are currently presented in a variety of forms, such as relational databases (Galperin, 2004) , diagrams (Kohn, 1999; Peleg et al., 2002) , ontology (Ashburner et al., 2000) and markup language (Hucka et al., 2003) , but they are integrated through an ill-defined, informal process. This assortment of information integration methods can hamper biological studies, especially of large complex systems. A well-defined process and integration technology can orchestrate system-level integration efforts by biologists, computer scientists and engineers, and provide consistency and manageability during integration.", "cite_spans": [{"start": 140, "end": 161, "text": "(Ideker et al., 2001)", "ref_id": "BIBREF10"}, {"start": 465, "end": 481, "text": "(Galperin, 2004)", "ref_id": "BIBREF6"}, {"start": 493, "end": 505, "text": "(Kohn, 1999;", "ref_id": "BIBREF13"}, {"start": 506, "end": 525, "text": "Peleg et al., 2002)", "ref_id": "BIBREF17"}, {"start": 537, "end": 561, "text": "(Ashburner et al., 2000)", "ref_id": "BIBREF0"}, {"start": 582, "end": 602, "text": "(Hucka et al., 2003)", "ref_id": "BIBREF9"}], "ref_spans": [], "section": "INTRODUCTION"}, {"text": "Current advanced engineering systems and biological systems have followed a convergent evolution (Csete and Doyle, 2002) . * To whom correspondence should be addressed. This resemblance is particularly evident in a comparison between object-oriented software and typical biological systems (Table 1 and  Supplemental Table 1 ). Both systems are based on components and protocols, and their layered control mechanisms allow them to efficiently handle complexity. This complexity is further managed by subsystems, both in biological and object-oriented software systems. Furthermore, these systems contain static time-independent and dynamic time-dependent relationships. This resemblance has led to a very similar architecture and system-level organization, making it possible to represent a biological system as an object-oriented software system.", "cite_spans": [{"start": 97, "end": 120, "text": "(Csete and Doyle, 2002)", "ref_id": "BIBREF2"}], "ref_spans": [{"start": 290, "end": 324, "text": "(Table 1 and  Supplemental Table 1", "ref_id": "TABREF0"}], "section": "INTRODUCTION"}, {"text": "To effectively construct a high-quality object-oriented software system, three components are necessary. First, a well-defined software engineering process, such as the waterfall model, Rational Unified Process, agile process, etc. (Graham, 2001) , is needed to specify stepwise activities and define what should be accomplished during software development. Second, object-oriented technology, a paradigm of software development, including object-oriented programming, analysis, design and database centered on the object concept, is vital for object-oriented software development. This technology is used to dissect real-world problems and create an object-oriented software system to solve these problems. Third, a widely accepted object-oriented modeling language, such as the Unified Modeling Language (UML) (Rumbaugh et al., 1999) , should be used to represent this object-oriented system. This visual representation can help to organize and communicate a complex software system as small, manageable pieces without losing system integrity. While these components were specifically designed for successful software development, they can be adapted for biological system information integration.", "cite_spans": [{"start": 232, "end": 246, "text": "(Graham, 2001)", "ref_id": "BIBREF8"}, {"start": 812, "end": 835, "text": "(Rumbaugh et al., 1999)", "ref_id": "BIBREF22"}], "ref_spans": [], "section": "INTRODUCTION"}, {"text": "The similarity between biological and object-oriented software systems at the system organization level indicates that we can represent one by another. Therefore, the integration of biological information at the system level can be approached by reverse engineering the biological system into an object-oriented software architecture. Following a well-defined software development process to reverse engineer a biological system offers significant advantages. Although simple systems can be easily modeled by an indiscriminate approach, a formal approach is necessary for the creation of complex system models, such as those found in biology. Moreover, when this methodology is applied to biological system modeling, the distinct phases of software development allow tasks best suited for Call-back functions, observer/visitor patterns (Gamma et al., 1997) Feedback controls One part of the system originates a signal that affects the behavior of the other components of the system and this interaction in return affects the behavior of the subsystem where the signal originated Component dynamics Life cycle of individual objects Life cycle of individual proteins", "cite_spans": [{"start": 836, "end": 856, "text": "(Gamma et al., 1997)", "ref_id": "BIBREF7"}], "ref_spans": [], "section": "INTRODUCTION"}, {"text": "The birth and death of individual components a See also Discussion section. The concepts of biological system and object-oriented software systems are compared and the commonalities among these concepts are listed. We only used the cell system to represent a typical biological system in this table. This comparison focuses on the system organization and functionality. We provide correlations between the main object-oriented concepts (i.e. object, composition, inheritance, polymorphism and encapsulation). However, biological and object-oriented system concepts are not necessarily a one-to-one mapping.", "cite_spans": [], "ref_spans": [], "section": "INTRODUCTION"}, {"text": "Modeling of some of the biological system components and a further explanation of object-oriented concepts can be found in the main text.", "cite_spans": [], "ref_spans": [], "section": "INTRODUCTION"}, {"text": "biologists or computer scientists to be divided and coordinated. In addition, applying a well-defined software engineering process and object-oriented methodology provide an effective means to capture specifications from experimental data and integrate the biological system information. Finally, this process provides a guideline for the development of an integrated biological system, represented as an object-oriented software architecture, in a widely accepted objectoriented modeling language (such as UML), which can facilitate communication about complex systems among software engineers, biologists and other users. Recently, biologists have also begun to develop and specify processes for biological data integration, such as the one used for the TRANSPATH database (Schacherer et al., 2001) , but this activity has been fairly limited and has not gained the community-wide acceptance comparable with popular software engineering processes.", "cite_spans": [{"start": 775, "end": 800, "text": "(Schacherer et al., 2001)", "ref_id": "BIBREF23"}], "ref_spans": [], "section": "INTRODUCTION"}, {"text": "To demonstrate the efficacy of a well-defined software engineering process in the translation of a biological system to a model grounded in object-oriented principles, we used UML in the development of a severe acquired respiratory syndrome-coronavirus (SARS-CoV) model. SARS-CoV, which killed nearly 800 people and infected 8000 worldwide, consists of 28 structural and non-structural proteins.", "cite_spans": [], "ref_spans": [], "section": "INTRODUCTION"}, {"text": "Although the viral infection and replication process is not entirely resolved, some details have emerged. Briefly, the virus binds to the cellular ACE2 receptor via its spike (S) protein, then fuses with the host cell membrane (Li et al., 2003) . Genomic RNA is released, and gene one, encoding the non-structural replicase proteins is translated. The replicase proteins are cleaved by the papain-like proteinase (Rota et al., 2003) and 3C-like protease (Fan et al., 2004) also contained within gene one. The replicase produces the structural protein mRNAs from the remaining genome, which are subsequently translated. The structural proteins (Ying et al., 2004) consist of the membrane (M) (Rottier et al., 1986) and envelope (E) (Yu et al., 1994) proteins, which form the viral envelope, the S protein that binds the cellular receptor (Xiao et al., 2003) and nucleocapsid (N) protein, which associates with the viral RNA to form the ribonucleoprotein (Ying et al., 2004) . The recently identified transmembrane proteins U274 and U122 may also serve as structural proteins (Fielding et al., 2004; Tan et al., 2004) . The virus assembles in an intermediate compartment between the Golgi and endoplasmic reticulum (Lai and Cavanagh, 1997) , and is released via the constitutive exocytic pathway (Lai and Cavanagh, 1997) . In this paper, we demonstrate that a complex biological system can be reverse-engineered, and the resulting software representation can capture the static and dynamic relationships contained with the system.", "cite_spans": [{"start": 227, "end": 244, "text": "(Li et al., 2003)", "ref_id": "BIBREF16"}, {"start": 413, "end": 432, "text": "(Rota et al., 2003)", "ref_id": "BIBREF19"}, {"start": 454, "end": 472, "text": "(Fan et al., 2004)", "ref_id": "BIBREF3"}, {"start": 643, "end": 662, "text": "(Ying et al., 2004)", "ref_id": "BIBREF30"}, {"start": 691, "end": 713, "text": "(Rottier et al., 1986)", "ref_id": "BIBREF20"}, {"start": 731, "end": 748, "text": "(Yu et al., 1994)", "ref_id": "BIBREF31"}, {"start": 837, "end": 856, "text": "(Xiao et al., 2003)", "ref_id": "BIBREF28"}, {"start": 953, "end": 972, "text": "(Ying et al., 2004)", "ref_id": "BIBREF30"}, {"start": 1074, "end": 1097, "text": "(Fielding et al., 2004;", "ref_id": "BIBREF4"}, {"start": 1098, "end": 1115, "text": "Tan et al., 2004)", "ref_id": "BIBREF25"}, {"start": 1213, "end": 1237, "text": "(Lai and Cavanagh, 1997)", "ref_id": "BIBREF15"}, {"start": 1294, "end": 1318, "text": "(Lai and Cavanagh, 1997)", "ref_id": "BIBREF15"}], "ref_spans": [], "section": "INTRODUCTION"}, {"text": "Information collection To define the requirements and collect the information necessary for model generation, two approaches were necessary. First, annotations of the SARS viral gene products were obtained through an automated pipeline, GeneAtlas, implemented by Accelrys, Inc. (Kitson et al., 2002) . This pipeline can efficiently identify the function of a gene or a protein through homology searches and structural analysis (Yan et al., 2003) . Second, an extensive literature review was manually conducted. Detailed information about the SARS-CoV and viral infection were collected. Because of the relatively recent appearance of SARS-CoV, when information was not available, functions and relationships were extrapolated from homologous genes in other viruses.", "cite_spans": [{"start": 278, "end": 299, "text": "(Kitson et al., 2002)", "ref_id": "BIBREF12"}, {"start": 427, "end": 445, "text": "(Yan et al., 2003)", "ref_id": "BIBREF29"}], "ref_spans": [], "section": "Requirement-gathering phase"}, {"text": "The attributes and the interactions of the viral proteins were captured using CRC cards as described by Shegogue and Zheng (2004) (for an example of a CRC card, see Supplemental Figure 1 ).", "cite_spans": [{"start": 104, "end": 129, "text": "Shegogue and Zheng (2004)", "ref_id": "BIBREF24"}], "ref_spans": [{"start": 178, "end": 186, "text": "Figure 1", "ref_id": "FIGREF1"}], "section": "CRC card generation"}, {"text": "Use case development Based on the information gathered, a use case was developed to reflect the viral infection process (see Supplemental Figure 2 ). The use case also serves to define the boundary and scope of the SARS-CoV model. Therefore, although the infection process may involve other elements such as the immune system, this study was limited, as defined in the use case, to those events that directly involve the interaction between the virus and the cell.", "cite_spans": [], "ref_spans": [{"start": 138, "end": 146, "text": "Figure 2", "ref_id": null}], "section": "CRC card generation"}, {"text": "Use case diagram generation To define the high-level interaction between the SARS-CoV and the cell, a UML use case diagram was generated (see Supplemental Figure 3 ). This diagram was based on the boundaries defined in the use case. This and other UML diagrams in this study are generated using Microsoft Visio Pro. For a review on UML models see http:// bdn.borland.com/article/0,1410,31863,00.html Conceptual model generation To provide an overview of the system and its interrelationships a conceptual model, or simplified class diagram, was generated based on the information defined in the requirement-gathering phase. This conceptual model integrated biological information, and represented the viral and cellular components involved in viral infection and their relationships in UML notation (see Supplemental Figure 4 ). By applying object-oriented analysis, the SARS virus and the cellular components involved were decomposed into objects and the component relationships were realized. However, information regarding component properties is hidden. This intermediate artifact defines the organization of the biological system and provides an overview of the components and their relationships.", "cite_spans": [], "ref_spans": [{"start": 155, "end": 163, "text": "Figure 3", "ref_id": "FIGREF2"}, {"start": 817, "end": 825, "text": "Figure 4", "ref_id": "FIGREF3"}], "section": "Analysis phase"}, {"text": "System sequence diagram generation To capture the sequence of events occurring between the SARS-CoV and cell at the system-level, a system sequence diagram was created (see Supplemental Figure 5 ).", "cite_spans": [], "ref_spans": [{"start": 186, "end": 194, "text": "Figure 5", "ref_id": null}], "section": "Analysis phase"}, {"text": "State diagram generation State diagrams were created to capture the transitions and different states that a cellular component can exist. In addition, multiple concurrent states can be illustrated using this UML notation. An example of a state diagram for the M protein is shown in Supplemental Figure 6 . Additional state diagrams for the S, E and N proteins can be found at http://people.musc.edu/\u223czhengw/SARS/State%20Diagrams/ web%20page/Statechart_index.htm Sequence, activity and class diagram generation Sequence, activity and class diagrams have been used as an example to demonstrate the feasibility of generating an object-oriented representation of the SARS-CoV and cell system. To generate these diagrams, objects representing corresponding bioentities are created and their essential attributes are captured.", "cite_spans": [], "ref_spans": [{"start": 295, "end": 303, "text": "Figure 6", "ref_id": null}], "section": "Design phase"}, {"text": "Interactions among objects are also identified. For each interaction, a corresponding method is generated. The nature of the interaction determines the method parameters. To generate sequence diagrams the sequence of events is captured. Scenarios are also generated for object interactions and used to generate activity diagrams. The information captured in the sequence diagram and activity diagrams are used, along with the bioentities attributes, to generate class diagrams.", "cite_spans": [], "ref_spans": [], "section": "Design phase"}, {"text": "Model validation Models are validated by referring back to the CRC cards and use case to determine if the requirements set forth in the requirementgathering phase have been met.", "cite_spans": [], "ref_spans": [], "section": "Design phase"}, {"text": "Web-based implementation These diagrams, along with CRC cards for objects in the system, were incorporated into a web-based system to deliver our object-oriented representation to the users (http://people. musc.edu/\u223czhengw/SARS/Software-Process.htm).", "cite_spans": [], "ref_spans": [], "section": "Design phase"}, {"text": "To capture the static and dynamic relationships that occur between SARS-CoV and a cell, models were constructed by following an adapted, linear, sequential software process containing distinct phases of requirement gathering, analysis and design (Fig. 1) . This approach is suitable because of the relative simplicity of the viral infection process. Since the major activities (such as requirement gathering, analysis and design) of this sequential software process serve as the foundation for other advanced software engineering processes, these advanced processes can be applied to modeling more complex biological systems. The requirement-gathering phase entails collecting all available information about the system, generating CRC cards (see Supplemental Figure 1 ) to capture biological entity (bioentity) functions and collaborators, and defining a use case (see Supplemental Figure 2 ). The analysis phase is used to dissect the interrelationships among components involved in viral infection and serves as a basis for the detailed models generated in the design phase. Here, the gathered information is used to create a use case diagram (see Supplemental Figure 3 ), conceptual model (see Supplemental Figure 4 ) and system sequence diagram (see Supplemental Figure 5 ). In the design phase, information from the analysis and requirement-gathering stages is incorporated to develop a detailed model, which represents the static (class diagram, see Supplemental ", "cite_spans": [], "ref_spans": [{"start": 246, "end": 254, "text": "(Fig. 1)", "ref_id": "FIGREF1"}, {"start": 760, "end": 768, "text": "Figure 1", "ref_id": "FIGREF1"}, {"start": 883, "end": 891, "text": "Figure 2", "ref_id": null}, {"start": 1164, "end": 1172, "text": "Figure 3", "ref_id": "FIGREF2"}, {"start": 1211, "end": 1219, "text": "Figure 4", "ref_id": "FIGREF3"}, {"start": 1268, "end": 1276, "text": "Figure 5", "ref_id": null}], "section": "Software engineering process"}, {"text": "The major events of SARS-CoV infection include virus binding, membrane fusion, viral RNA replication, structural proteins translation, viral assembly and release. Sequence diagrams were created to capture the dynamic nature of these processes as an object-oriented software system. A high-level representation of the SARS viral infection is reflected chronologically in Figure 2 . Simple (such as proteins) or complex (such as viral replicase or virus) bioentities, identified by literature searches, are modeled as objects, which are represented by rectangles with vertical lifelines. Object functions, which are implemented by the methods contained within the objects, are used to represent the functions of these bioentities. For example, a viral replicase can take a viral RNA as a template and generates a new viral RNA through replication. Similarly, the Viral_Replicase object function, replicate(), takes a viral RNA as a template and generates new Viral_RNA.", "cite_spans": [], "ref_spans": [{"start": 370, "end": 378, "text": "Figure 2", "ref_id": null}], "section": "Sequence diagram generation"}, {"text": "To capture interactions between objects, one object can call a method of another object by connecting object lifelines in the sequence diagram (Fig. 2) . This invocation of an object function by another is described as one object sending a message to another object. In this way, real-world processes may be captured using an object-oriented approach. For instance, the cell object can call the translation machinery to translate the viral replicase by sending a message translate(in: Positive_Genomic_RNA), where the value after the 'in' is an object, Positive_Genomic_RNA, that must first be passed into the method. To complete the process, the translation machinery will use this Positive_Genomic_RNA as a template to translate and create a 'viral replicase' object, which is sent back to the cell. The cell now contains a copy of the viral replicase for later use. Together, this message passing captures the cellular process of translation of a viral RNA into a viral replicase.", "cite_spans": [], "ref_spans": [{"start": 143, "end": 151, "text": "(Fig. 2)", "ref_id": null}], "section": "Sequence diagram generation"}, {"text": "Alternatively, a message need not be passed between objects. A self-call may include self-checks or autoactivation signals. In the case of the assembleVirus() function call, the cell requires two components, structural protein and viral RNA, to generate the virus. However, a self-call might only indicate whether an event has occurred and not accept any parameters. For example, the bindVirus() method only indicates whether a virus has bound the cell. Together, the events leading to the creation of a virus can be chronologically ordered and can mimic the viral infection process. Additional details that reflect the RNA replication process, translation of the structural proteins and viral assembly are available in Supplemental Figures 7-9 . Collectively, these diagrams demonstrate that the activities of a biological system can be represented as part of the dynamic processes of an object-oriented software system.", "cite_spans": [], "ref_spans": [{"start": 720, "end": 744, "text": "Supplemental Figures 7-9", "ref_id": null}], "section": "Sequence diagram generation"}, {"text": "To capture additional features of the dynamic architecture, activity diagrams were created to reflect the SARS-CoV and viral infection process. Unlike the sequence diagram, which captures best-case scenario events, the action sequence or flow of the activity diagram can portray alternative outcomes. For instance, as shown in Figure 3 , a virus may bind a receptor if one is available, or else this action ends and the flow is directed to the final state. Once bound, if the S protein undergoes a conformational change that exposes the fusion peptide, then the virus can fuse with the cellular membrane. Alternatively, the virus may detach from the cell, or if a neighboring cell is available cell-cell fusion may be initiated or the flow may be directed to the final state, indicating that infection failed. If the virus is able to fuse with the membrane, release of the N protein will decoat the positive genomic RNA, or else this action will also end. Once decoated, the viral RNA is replicated after which the virus is assembled and released. These subactivities are presented in greater detail in Supplemental Figures 11-13 . In addition, Supplemental Figure 10 illustrates a high-level view reflecting only the major stages of the viral infection process. Overall, these activity diagrams define the main success and alternative scenarios that may occur during viral infection.", "cite_spans": [], "ref_spans": [{"start": 327, "end": 335, "text": "Figure 3", "ref_id": "FIGREF2"}, {"start": 1103, "end": 1129, "text": "Supplemental Figures 11-13", "ref_id": "FIGREF1"}, {"start": 1158, "end": 1167, "text": "Figure 10", "ref_id": "FIGREF1"}], "section": "Activity diagram generation"}, {"text": "Complex bioentities and their relationships are contained within the biological system encompassing the cell and SARS-CoV. These relationships include SARS-CoV binding to the cell receptor, viral protein interacting with the translation machinery and RNA interacting with the viral replicase. To capture this static architecture, class diagrams were generated that model the components, operations and interrelationships that occur between the SARS-CoV and cell. Specifically, Figure 4 , a high-level class diagram, captures the major components of the SARS virus and viral infection as objects and their associations using an object-oriented representation. These objects, where applicable, were given attributes that describe important characteristics, or if changed, might alter the function of a Fig. 2 . A high-level sequence diagram for major SARS viral infection events. Bioentities (cell, virus, translation machinery and viral replicase) are modeled as objects. These objects are shown at the top of the diagrams with vertical lifelines ( ), representing extensions of the objects below. Functions and events associated with these bioentities are modeled as messages sent to the corresponding objects. These message calls, indicated by solid arrows, are made between objects via connection of their lifelines. Messages contain a message name followed by parameters, which must be passed into the object and/or outputted from the object, e.g. translation machinery executes its function of translating viral mRNA by receiving a translate message 'translate (in: Positive_Genomic_RNA)' from the cell. This message accepts a Positive_Genomic_RNA as a template, indicated by 'in: Positive_Genomic_RNA', then a 'Viral_Replicase' is created and returned. These return values are displayed below the message call as a named dotted arrow extending in the opposite direction as the original message call. Where return values are not explicitly indicated, as in an object calling itself ( ), an 'out' followed by a return value is substituted. Events in gray boxes are shown in more detail in Supplemental Figures 7-9. component. The object functions, which parallel bioentity functions, were generated from the sequence diagrams. These functions or operations are a declaration of the methods that an object may use. In addition, protein complexes can be represented, as in the case of the viral replicase, as complex objects, which are composed of many other objects (see Supplemental Figure 15 ). Similarly, utilizing composition allows the virus object to mimic a real-world virus, which contains structural proteins, positive genomic RNA and a membrane (Fig. 4) . Larger systems such as organelles and pathways can also be contained within the object-oriented software system in the form of modules, subsystems or packages. In this way, class diagrams allow a biological system to be captured as a layered system, e.g. the cellular translation machinery may be represented as a single object, even though it has a very complex mechanism and regulation. This complexity could also be captured in a subsystem that specifically focuses on the cellular translation machinery. This layered structure indicates that the object-oriented technology can be used to represent the layered structure of complex biological systems.", "cite_spans": [], "ref_spans": [{"start": 477, "end": 485, "text": "Figure 4", "ref_id": "FIGREF3"}, {"start": 800, "end": 806, "text": "Fig. 2", "ref_id": null}, {"start": 2092, "end": 2117, "text": "Supplemental Figures 7-9.", "ref_id": null}, {"start": 2486, "end": 2495, "text": "Figure 15", "ref_id": "FIGREF1"}, {"start": 2657, "end": 2665, "text": "(Fig. 4)", "ref_id": "FIGREF3"}], "section": "Class diagram generation"}, {"text": "In addition, the UML notation provides a mechanism to specify inheritance, which may be used to indicate an object that is the foundation for other objects. For instance, structural protein and Gene1 viral protein precursor inherit the properties of the viral protein object (Fig. 4) . Binary associations are also used to capture associations between objects. These associations may contain cardinalities, which indicate how many of one object interacts with another. For instance, a virus can infect one cell and a cell can be infected by one to many viruses (Fig. 4) . Additional class diagrams showing a higher level of detail and focusing on the interactions and components of the ) are captured during different time periods. This diagram can represent sequential as well as concurrent events. Concurrent events are represented by forks ( ) and merges ( ). This architecture signifies that multiple events are possible simultaneously and the occurrence of at least one of these events is enough to continue the flow of control. In contrast, the flow of control may also be conditional, e.g. decision diamonds ( ) represent a point at which alternative events can occur. At these decision diamonds, guard conditions must be satisfied for the flow of control to continue, or else the flow of control follows an alternative route. structural proteins, replicase complex and viral replication process are available in Supplemental Figures 14-16 . These class diagrams demonstrate that the static structure of a biological system can be represented as an object-oriented model. Together, the models generated using the described object-oriented methodology yield a software system representation of a biological system, capturing both static and dynamic relationships.", "cite_spans": [], "ref_spans": [{"start": 275, "end": 283, "text": "(Fig. 4)", "ref_id": "FIGREF3"}, {"start": 561, "end": 569, "text": "(Fig. 4)", "ref_id": "FIGREF3"}, {"start": 1420, "end": 1446, "text": "Supplemental Figures 14-16", "ref_id": "FIGREF1"}], "section": "Class diagram generation"}, {"text": "Here, we have demonstrated that a complex biological system can be modeled following a systematic, well-defined software engineering process. We have leveraged the power of the UML to construct our object-oriented software representation of the SARS-CoV and its infection process. Even though UML has been proposed as a tool to model biological systems (Bornberg-Bauer and Paton, 2002; Roux-Rouquie et al., 2004) , and an overview of the modeling process used in the development of biological simulation software is available (Johnson et al., 2004) , without a well-defined methodology and software-engineering process, such as object-oriented analysis and design, transforming biological information into UML becomes an ad hoc activity. However, by applying object-oriented analysis and design, biological entities and related information can be systematically transformed into an object-oriented system by this well-defined methodology. Furthermore, UML is created to represent object-oriented software systems. If a biological system itself is directly represented by UML, but not as an object-oriented software system, this representation may be confusing and the full capabilities of UML may not be achieved. Reverse engineering a biological system into an object-oriented system ensures that the object-oriented system can be accurately and completely represented by UML. Additional tools such as class-responsibility-collaboration cards (Wilkinson, 1998) , which can be used to capture the attributes, collaborators and functions of the annotated object, may also be employed to capture data not fully represented by the UML notation.", "cite_spans": [{"start": 353, "end": 385, "text": "(Bornberg-Bauer and Paton, 2002;", "ref_id": "BIBREF1"}, {"start": 386, "end": 412, "text": "Roux-Rouquie et al., 2004)", "ref_id": "BIBREF21"}, {"start": 526, "end": 548, "text": "(Johnson et al., 2004)", "ref_id": "BIBREF11"}, {"start": 1444, "end": 1461, "text": "(Wilkinson, 1998)", "ref_id": "BIBREF27"}], "ref_spans": [], "section": "DISCUSSION"}, {"text": "One major problem for modeling and integrating biological information is the lack of information: experimental observations without known underlining mechanisms. This challenge can be met by applying object encapsulation: defining the behavior of an object through its operations that are accessible to other objects, but hiding the underlining mechanism of the operations and object attributes from other objects (Graham, 2001) . For example, to communicate that the translation machinery translates a viral protein does not require that every component of the translation machinery be detailed. Specifically, to capture this information we gave the translation machinery a function called 'translate'. This function will create a viral protein from the viral mRNA without defining the real process of how the viral protein is created. This approach can encapsulate the unknown cellular process inside a well-known function or behavior, and model the biological system without understanding every detail of the system.", "cite_spans": [{"start": 414, "end": 428, "text": "(Graham, 2001)", "ref_id": "BIBREF8"}], "ref_spans": [], "section": "DISCUSSION"}, {"text": "Object-oriented models have additional applications in the construction of biological systems. The layered structure of the objectoriented model allows one to capture various levels of detail such as population, organism, organ, pathway or cell system. This layering can be used to create compartments, which define spatial relationships between cellular components. Webb and White (2003) have recently modeled these compartments as classes. However, the compartment issue may be addressed using packages or subsystems. The flexibility of the object-oriented model and UML tool also allow an assortment of biological information to be captured and subsequently translated into mathematical models. It has been shown by Priami et al. (2001) and Webb and White (2003) that rate equations can be generated using UML sequence and state diagrams. Together, an object-oriented approach is capable of modeling enzymatic reactions and metabolic pathways (Freier et al., 2003) . However, challenges still exist for fully representing a biological system as an object-oriented system.", "cite_spans": [{"start": 367, "end": 388, "text": "Webb and White (2003)", "ref_id": "BIBREF26"}, {"start": 719, "end": 739, "text": "Priami et al. (2001)", "ref_id": "BIBREF18"}, {"start": 744, "end": 765, "text": "Webb and White (2003)", "ref_id": "BIBREF26"}, {"start": 946, "end": 967, "text": "(Freier et al., 2003)", "ref_id": "BIBREF5"}], "ref_spans": [], "section": "DISCUSSION"}, {"text": "Significantly, because the breadth and depth of biological systems make a complete description of biological systems intractable, a collaborative effort is essential. To integrate new information into existing models, a system, such as a web portal, will have to be implemented that also allows experts to contribute to model maturation. The Alliance for Cellular Signaling (http://www.signaling-gateway.org/) has already set a precedence for such a collaboration. This approach is especially suitable for object-oriented system development, since the modular nature of an object-oriented system allows the modification of individual components without affecting other parts of the system. Together, these approaches will distribute the burden of creating these models. Because portions of a model might be derived from information that contains varying degrees of confidence, in the future, UML models might benefit from the addition of a confidence indicator to indicate whether portions of a model are derived from experimental data or are based on hypothesis and speculation. While this study has focused on the construction of a web-based system for navigation of the layered structure of a biological system, future work will also strive to integrate information into a searchable database, and implement software systems to simulate biological processes. Finally, to extend this application to a more complex biological system, it will be necessary to adopt an advanced iterative process, such as the Rational Unified Process (Kruchten, 2003) , or apply advanced techniques, such as Fa\u00e7ade pattern (Gamma et al., 1997) , in object-oriented design to reduce the complexity of the system. This will allow the development of more sophisticated methods to reverse engineer biological systems and significantly enhance the study of biological complexity at a system level.", "cite_spans": [{"start": 1533, "end": 1549, "text": "(Kruchten, 2003)", "ref_id": "BIBREF14"}, {"start": 1605, "end": 1625, "text": "(Gamma et al., 1997)", "ref_id": "BIBREF7"}], "ref_spans": [], "section": "DISCUSSION"}, {"text": "We demonstrate that by applying an adapted, sequential software engineering process, a complex biological system (SARS viral infection) can be reverse-engineered and represented as an object-oriented software system. Similar to software engineering projects, the well-defined software process makes the biological system information integration repeatable, controllable, scalable and manageable. The resulting object-oriented system not only captures information about individual components but also displays the system-level architecture and interrelationships among system components. Furthermore, this object-oriented model captures system dynamics, in that the key events and the process of viral infection are also described. Our research demonstrates that object-oriented analysis and design can be employed as an effective methodology to integrate biological information, and the UML representation is a comprehensive approach to capturing the complexity of biological systems, integrating biological information and facilitating communication between biologists and computer scientists.", "cite_spans": [], "ref_spans": [], "section": "DISCUSSION"}, {"text": "supported by a grant (DE-FG02-01ER121) from the Department of Energy.", "cite_spans": [], "ref_spans": [], "section": "DISCUSSION"}], "bib_entries": {"BIBREF0": {"ref_id": "b0", "title": "Gene Ontology: tool for the unification of biology. The Gene Ontology Consortium", "authors": [{"first": "M", "middle": [], "last": "Ashburner", "suffix": ""}], "year": 2000, "venue": "Nat. Genet", "volume": "25", "issn": "", "pages": "25--29", "other_ids": {}}, "BIBREF1": {"ref_id": "b1", "title": "Conceptual data modelling for bioinformatics", "authors": [{"first": "E", "middle": [], "last": "Bornberg-Bauer", "suffix": ""}, {"first": "N", "middle": ["W"], "last": "Paton", "suffix": ""}], "year": 2002, "venue": "Brief Bioinformatics", "volume": "3", "issn": "", "pages": "166--180", "other_ids": {}}, "BIBREF2": {"ref_id": "b2", "title": "Reverse engineering of biological complexity", "authors": [{"first": "M", "middle": ["E"], "last": "Csete", "suffix": ""}, {"first": "J", "middle": ["C"], "last": "Doyle", "suffix": ""}], "year": 2002, "venue": "Science", "volume": "295", "issn": "", "pages": "1664--1669", "other_ids": {}}, "BIBREF3": {"ref_id": "b3", "title": "Biosynthesis, purification, and substrate specificity of severe acute respiratory syndrome coronavirus 3C-like proteinase", "authors": [{"first": "K", "middle": [], "last": "Fan", "suffix": ""}], "year": 2004, "venue": "J. Biol. Chem", "volume": "279", "issn": "", "pages": "1637--1642", "other_ids": {}}, "BIBREF4": {"ref_id": "b4", "title": "Characterization of a unique group-specific protein (U122) of the severe acute respiratory syndrome coronavirus", "authors": [{"first": "B", "middle": ["C"], "last": "Fielding", "suffix": ""}], "year": 2004, "venue": "J. Virol", "volume": "78", "issn": "", "pages": "7311--7318", "other_ids": {}}, "BIBREF5": {"ref_id": "b5", "title": "iUDB: an object-oriented system for modelling, integration and analysis of gene controlled metabolic networks", "authors": [{"first": "A", "middle": [], "last": "Freier", "suffix": ""}], "year": 2003, "venue": "In Silico Biol", "volume": "3", "issn": "", "pages": "215--227", "other_ids": {}}, "BIBREF6": {"ref_id": "b6", "title": "The Molecular Biology Database Collection: 2004 update", "authors": [{"first": "M", "middle": ["Y"], "last": "Galperin", "suffix": ""}], "year": 2004, "venue": "Nucleic Acids Res", "volume": "32", "issn": "", "pages": "3--22", "other_ids": {}}, "BIBREF7": {"ref_id": "b7", "title": "Design Patterns", "authors": [{"first": "E", "middle": [], "last": "Gamma", "suffix": ""}, {"first": "R", "middle": [], "last": "Helm", "suffix": ""}, {"first": "R", "middle": [], "last": "Johnson", "suffix": ""}, {"first": "J", "middle": [], "last": "Vlissides", "suffix": ""}], "year": 1997, "venue": "", "volume": "", "issn": "", "pages": "331--349", "other_ids": {}}, "BIBREF8": {"ref_id": "b8", "title": "Basic concepts", "authors": [{"first": "I", "middle": [], "last": "Graham", "suffix": ""}], "year": 2001, "venue": "Object-oriented Methods, Principles & Practice", "volume": "", "issn": "", "pages": "461--494", "other_ids": {}}, "BIBREF9": {"ref_id": "b9", "title": "The Systems Biology Markup Language (SBML): a medium for representation and exchange of biochemical network models", "authors": [{"first": "M", "middle": [], "last": "Hucka", "suffix": ""}], "year": 2003, "venue": "Bioinformatics", "volume": "19", "issn": "", "pages": "524--531", "other_ids": {}}, "BIBREF10": {"ref_id": "b10", "title": "A new approach to decoding life: systems biology", "authors": [{"first": "T", "middle": [], "last": "Ideker", "suffix": ""}], "year": 2001, "venue": "Ann. Rev. Genom. Hum. Genet", "volume": "2", "issn": "", "pages": "343--372", "other_ids": {}}, "BIBREF11": {"ref_id": "b11", "title": "Simulating complex intracellular processes using objectoriented computational modeling", "authors": [{"first": "C", "middle": ["G"], "last": "Johnson", "suffix": ""}], "year": 2004, "venue": "Prog. Biophys. Mol. Biol", "volume": "86", "issn": "", "pages": "379--406", "other_ids": {}}, "BIBREF12": {"ref_id": "b12", "title": "Functional annotation of proteomic sequences based on consensus of sequence and structural analysis", "authors": [{"first": "D", "middle": ["H"], "last": "Kitson", "suffix": ""}], "year": 2002, "venue": "Brief Bioinformatics", "volume": "3", "issn": "", "pages": "32--44", "other_ids": {}}, "BIBREF13": {"ref_id": "b13", "title": "Molecular interaction map of the mammalian cell cycle control and DNA repair systems", "authors": [{"first": "K", "middle": ["W"], "last": "Kohn", "suffix": ""}], "year": 1999, "venue": "Mol. Biol. Cell", "volume": "10", "issn": "", "pages": "2703--2734", "other_ids": {}}, "BIBREF14": {"ref_id": "b14", "title": "The Rational Unified Process: An Introduction, 3rd edn", "authors": [{"first": "P", "middle": [], "last": "Kruchten", "suffix": ""}], "year": 2003, "venue": "", "volume": "336", "issn": "", "pages": "", "other_ids": {}}, "BIBREF15": {"ref_id": "b15", "title": "The molecular biology of coronaviruses", "authors": [{"first": "M", "middle": [], "last": "Lai", "suffix": ""}, {"first": "D", "middle": [], "last": "Cavanagh", "suffix": ""}], "year": 1997, "venue": "Adv. Virus Res", "volume": "48", "issn": "", "pages": "1--100", "other_ids": {}}, "BIBREF16": {"ref_id": "b16", "title": "Angiotensin-converting enzyme 2 is a functional receptor for the SARS coronavirus", "authors": [{"first": "W", "middle": [], "last": "Li", "suffix": ""}], "year": 2003, "venue": "Nature", "volume": "426", "issn": "", "pages": "450--454", "other_ids": {}}, "BIBREF17": {"ref_id": "b17", "title": "Modelling biological processes using workflow and Petri Net models", "authors": [{"first": "M", "middle": [], "last": "Peleg", "suffix": ""}], "year": 2002, "venue": "Bioinformatics", "volume": "18", "issn": "", "pages": "825--837", "other_ids": {}}, "BIBREF18": {"ref_id": "b18", "title": "Application of a stochastic name-passing calculus to representation and simulation of molecular processes", "authors": [{"first": "C", "middle": [], "last": "Priami", "suffix": ""}], "year": 2001, "venue": "Inform. Process. Lett", "volume": "80", "issn": "", "pages": "25--31", "other_ids": {}}, "BIBREF19": {"ref_id": "b19", "title": "Characterization of a novel coronavirus associated with severe acute respiratory syndrome", "authors": [{"first": "P", "middle": ["A"], "last": "Rota", "suffix": ""}], "year": 2003, "venue": "Science", "volume": "300", "issn": "", "pages": "1394--1399", "other_ids": {}}, "BIBREF20": {"ref_id": "b20", "title": "Predicted membrane topology of the coronavirus protein E1", "authors": [{"first": "P", "middle": [], "last": "Rottier", "suffix": ""}], "year": 1986, "venue": "Biochemistry", "volume": "25", "issn": "", "pages": "1335--1339", "other_ids": {}}, "BIBREF21": {"ref_id": "b21", "title": "Using the unified modelling language (UML) to guide the systemic description of biological processes and systems", "authors": [{"first": "M", "middle": [], "last": "Roux-Rouquie", "suffix": ""}], "year": 2004, "venue": "BioSystems", "volume": "75", "issn": "", "pages": "3--14", "other_ids": {}}, "BIBREF22": {"ref_id": "b22", "title": "The Unified Modeling Language Reference Manual", "authors": [{"first": "J", "middle": [], "last": "Rumbaugh", "suffix": ""}], "year": 1999, "venue": "", "volume": "550", "issn": "", "pages": "", "other_ids": {}}, "BIBREF23": {"ref_id": "b23", "title": "The TRANSPATH signal transduction database: a knowledge base on signal transduction networks", "authors": [{"first": "F", "middle": [], "last": "Schacherer", "suffix": ""}], "year": 2001, "venue": "Bioinformatics", "volume": "17", "issn": "", "pages": "1053--1057", "other_ids": {}}, "BIBREF24": {"ref_id": "b24", "title": "Capturing biological information with class-responsibility-collaboration cards", "authors": [{"first": "D", "middle": [], "last": "Shegogue", "suffix": ""}, {"first": "W", "middle": ["J"], "last": "Zheng", "suffix": ""}], "year": 2004, "venue": "Bioinformatics", "volume": "", "issn": "", "pages": "", "other_ids": {}}, "BIBREF25": {"ref_id": "b25", "title": "A novel severe acute respiratory syndrome coronavirus protein, U274, is transported to the cell surface and undergoes endocytosis", "authors": [{"first": "Y", "middle": ["J"], "last": "Tan", "suffix": ""}], "year": 2004, "venue": "J. Virol", "volume": "78", "issn": "", "pages": "6723--6734", "other_ids": {}}, "BIBREF26": {"ref_id": "b26", "title": "UML as a cell and biochemistry modeling language", "authors": [{"first": "K", "middle": [], "last": "Webb", "suffix": ""}, {"first": "T", "middle": [], "last": "White", "suffix": ""}], "year": 2003, "venue": "", "volume": "", "issn": "", "pages": "", "other_ids": {}}, "BIBREF27": {"ref_id": "b27", "title": "Using CRC Cards: An Informal Approach to Object-Oriented Development", "authors": [{"first": "N", "middle": ["M"], "last": "Wilkinson", "suffix": ""}], "year": 1998, "venue": "", "volume": "252", "issn": "", "pages": "", "other_ids": {}}, "BIBREF28": {"ref_id": "b28", "title": "The SARS-CoV S glycoprotein: expression and functional characterization", "authors": [{"first": "X", "middle": [], "last": "Xiao", "suffix": ""}], "year": 2003, "venue": "Biochem. Biophys. Res. Commun", "volume": "312", "issn": "", "pages": "1159--1164", "other_ids": {}}, "BIBREF29": {"ref_id": "b29", "title": "Assessment of putative protein targets derived from the SARS genome", "authors": [{"first": "L", "middle": [], "last": "Yan", "suffix": ""}], "year": 2003, "venue": "FEBS Lett", "volume": "554", "issn": "", "pages": "257--263", "other_ids": {}}, "BIBREF30": {"ref_id": "b30", "title": "Proteomic analysis on structural proteins of severe acute respiratory syndrome coronavirus", "authors": [{"first": "W", "middle": [], "last": "Ying", "suffix": ""}], "year": 2004, "venue": "Proteomics", "volume": "4", "issn": "", "pages": "492--504", "other_ids": {}}, "BIBREF31": {"ref_id": "b31", "title": "Mouse hepatitis virus gene 5b protein is a new virion envelope protein", "authors": [{"first": "X", "middle": [], "last": "Yu", "suffix": ""}], "year": 1994, "venue": "Virology", "volume": "202", "issn": "", "pages": "1018--1023", "other_ids": {}}}, "ref_entries": {"FIGREF0": {"text": "Figures 14-16 and Figure 4) and dynamic (for state diagram see Supplemental Figure 6, for sequence diagram see Supplemental Figures 7-9 and Figure 2, and for activity diagrams see Supplemental Figures 10-13 and Figure 3) nature of the SARS-CoV genome and infection process. Together, these diagrams provide a comprehensive software representation of the biological system.", "latex": null, "type": "figure"}, "FIGREF1": {"text": "A linear, sequential software process used for reverse engineering the SARS viral infection. Processes (at the top) are ordered in a time-dependent manner. Vertical lines extending from the processes indicate the process stage in which a model (at the bottom) is generated, and do not imply a time dependence. Major dependences among models are indicated.", "latex": null, "type": "figure"}, "FIGREF2": {"text": "Activity Diagram for SARS viral infection emphasizing the infection process. The infection process consists of three major events; bind cellular ACE2 receptor, fuse with the cell membrane and release its genomic RNA by uncoating. The process of RNA replication, assembly and viral release are detailed inSupplemental Figures 10-13. All activity diagrams have a pseudostart ( ) and pseudo-end ( ) states. Action states, represented by rounded rectangles (", "latex": null, "type": "figure"}, "FIGREF3": {"text": "High-level class diagram of SARS virus and viral infection. Major components of SARS virus and viral infection and their associations are modeled as objects. These objects are represented by rectangles within the diagram. Rectangles are divided into three parts. The first part contains the object name; the second part contains the attributes of the object; and the final part contains the functions an object can perform. Lines with solid diamonds ( ) at the end indicate composition. These are read from the diamond end, e.g. as Virus contains Structural_Proteins. Lines with open triangles ( ) represent generalizations. These are read from the triangle end, as Viral_Protein is a general type of Structural_Protein. Other interactions are represented as named, binary associations ( ). Interactions may contain cardinalities at their ends indicating the number of objects that interact with another object. As an example from above, one virus can infect one cell and one cell can be infected by one to many viruses. Grayed objects and interactions are shown in more detail in Supplemental Figures 14-16. Viral components (orange); cellular components (blue).", "latex": null, "type": "figure"}, "TABREF0": {"text": "Correspondence between biological system and object-oriented software concepts", "latex": null, "type": "table", "html": "<html><body><table><tr><td>Category </td><td>Concepts in object-oriented software system (Graham, 2001)\n</td><td>Concepts in biological system </td><td>Commonalities\n</td></tr><tr><td>Basic component </td><td>Objects </td><td>Cellular components (proteins, genes, etc.)\n</td><td>Both can be modeled as having intrinsic attributes and external functionalities or behavior\n</td></tr><tr><td>Component organization </td><td>Aggregation, composition </td><td>Protein complex formation/protein-protein interaction\n</td><td>Relationships among individual components\n</td></tr><tr><td>High-order components </td><td>Subsystems (also in the form of objects)\n</td><td>Organelles, individual pathways, cell, etc.\n</td><td>Both are complex modules built from basic components\n</td></tr><tr><td>Protocol for component interactions\n</td><td>Message passing </td><td>Interaction, signaling, modification is-a relationship (most enzymes are one kind of a protein)\n</td><td>Information passing in both situations\n</td></tr><tr><td>Hierarchical relationship </td><td>Inheritance </td><td>Specialized components share common features\n</td></tr><tr><td>Multifunctionality </td><td>Polymorphism </td><td>Enzymes catalyze different substrates, etc.\n</td><td>One component can operate on different types of other components of the system with different processes and outcomes\n</td></tr><tr><td>Observed behavior without knowing underlining mechanism\n</td><td>Encapsulation/information hidinga </td><td>Experimental observations without known mechanism\n</td><td>Both situations define the observed behavior without exposing the underlying mechanism\n</td></tr><tr><td>Controls </td><td>Call-back functions, observer/visitor patterns (Gamma et al., 1997)\n</td><td>Feedback controls </td><td>One part of the system originates a signal that affects the behavior of the other components of the system and this interaction in return affects the behavior of the subsystem where the signal originated\n</td></tr><tr><td>Component dynamics </td><td>Life cycle of individual objects </td><td>Life cycle of individual proteins\n</td><td>The birth and death of individual components\n</td></tr></table></body></html>"}}, "back_matter": [{"text": "We thank E. Voit for critical reading of this manuscript. D.S. is supported by NLM training grant 5-T15-LM007438-02. W.J.Z is partly", "cite_spans": [], "ref_spans": [], "section": "ACKNOWLEDGEMENTS"}]}