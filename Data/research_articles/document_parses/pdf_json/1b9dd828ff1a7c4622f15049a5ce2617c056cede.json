{"paper_id": "1b9dd828ff1a7c4622f15049a5ce2617c056cede", "metadata": {"title": "Coronavirus Optimization Algorithm: A bioinspired metaheuristic based on the COVID-19 propagation model", "authors": [{"first": "F", "middle": [], "last": "Mart\u00ednez-\u00c1lvarez", "suffix": "", "affiliation": {"laboratory": "", "institution": "Pablo de Olavide University", "location": {"postCode": "ES-41013", "settlement": "Seville", "country": "Spain"}}, "email": ""}, {"first": "G", "middle": [], "last": "Asencio-Cort\u00e9s", "suffix": "", "affiliation": {"laboratory": "", "institution": "Pablo de Olavide University", "location": {"postCode": "ES-41013", "settlement": "Seville", "country": "Spain"}}, "email": ""}, {"first": "J", "middle": ["F"], "last": "Torres", "suffix": "", "affiliation": {"laboratory": "", "institution": "Pablo de Olavide University", "location": {"postCode": "ES-41013", "settlement": "Seville", "country": "Spain"}}, "email": ""}, {"first": "D", "middle": [], "last": "Guti\u00e9rrez-Avil\u00e9s", "suffix": "", "affiliation": {"laboratory": "", "institution": "Pablo de Olavide University", "location": {"postCode": "ES-41013", "settlement": "Seville", "country": "Spain"}}, "email": ""}, {"first": "L", "middle": [], "last": "Melgar-Garc\u00eda", "suffix": "", "affiliation": {"laboratory": "", "institution": "Pablo de Olavide University", "location": {"postCode": "ES-41013", "settlement": "Seville", "country": "Spain"}}, "email": ""}, {"first": "R", "middle": [], "last": "P\u00e9rez-Chac\u00f3n", "suffix": "", "affiliation": {"laboratory": "", "institution": "Pablo de Olavide University", "location": {"postCode": "ES-41013", "settlement": "Seville", "country": "Spain"}}, "email": ""}, {"first": "C", "middle": [], "last": "Rubio-Escudero", "suffix": "", "affiliation": {"laboratory": "", "institution": "University of Seville", "location": {"postCode": "ES-41012", "settlement": "Seville", "country": "Spain"}}, "email": ""}, {"first": "J", "middle": ["C"], "last": "Riquelme", "suffix": "", "affiliation": {"laboratory": "", "institution": "University of Seville", "location": {"postCode": "ES-41012", "settlement": "Seville", "country": "Spain"}}, "email": ""}, {"first": "A", "middle": [], "last": "Troncoso", "suffix": "", "affiliation": {"laboratory": "", "institution": "Pablo de Olavide University", "location": {"postCode": "ES-41013", "settlement": "Seville", "country": "Spain"}}, "email": ""}]}, "abstract": [{"text": "A novel bioinspired metaheuristic is proposed in this work, simulating how the coronavirus spreads and infects healthy people. From an initial individual (the patient zero), the coronavirus infects new patients at known rates, creating new populations of infected people. Every individual can either die or infect and, afterwards, be sent to the recovered population. Relevant terms such as re-infection probability, super-spreading rate or traveling rate are introduced in the model in order to simulate as accurately as possible the coronavirus activity. The Coronavirus Optimization Algorithm has two major advantages compared to other similar strategies. First, the input parameters are already set according to the disease statistics, * Corresponding author, fmaralv@upo.es 1 arXiv:2003.13633v2 [cs.AI] 16 Apr 2020 preventing researchers from initializing them with arbitrary values. Second, the approach has the ability of ending after several iterations, without setting this value either. Infected population initially grows at an exponential rate but after some iterations, when considering social isolation measures and the high number recovered and dead people, the number of infected people starts decreasing in subsequent iterations. Furthermore, a parallel multi-virus version is proposed in which several coronavirus strains evolve over time and explore wider search space areas in less iterations. Finally, the metaheuristic has been combined with deep learning models, in order to find optimal hyperparameters during the training phase. As application case, the problem of electricity load time series forecasting has been addressed, showing quite remarkable performance.", "cite_spans": [], "ref_spans": [], "section": "Abstract"}], "body_text": [{"text": "The coronavirus (COVID-19) is a new respiratory virus, firstly discovered in humans in December 2019, that has spread worldwide, having been reported more than 1 million infected people so far. Much remains unknown about the virus, including how many people may have very mild or asymptomatic infections, and whether they can transmit the virus. The precise dimensions of the outbreak are hard to know.", "cite_spans": [], "ref_spans": [], "section": "Introduction"}, {"text": "Bioinspired models typically mimic behaviors from the nature and are known for their successful application in hybrid approaches to find parameters in machine learning model optimization. Viruses can infect people and these people can either die, infect other people or simply get recovered after the disease. Vaccines and the immune defense system typically fight the disease and help to mitigate their effects while an individual is still infected. This behavior is typically modeled by an SIR model, consisting of three kind of individuals: S for the number of susceptible, I for the number of infectious, and R for the number of recovered.", "cite_spans": [], "ref_spans": [], "section": "Introduction"}, {"text": "Metaheuristics must deal with huge search spaces, even infinite for the continuous cases, and must find suboptimal solutions in reasonable execution times. The rapid prop-agation of the coronavirus along with its ability of infecting most of the countries in the world impressively fast, has inspired the novel metaheuristic proposed in this work, named Coronavirus Optimization Algorithm (CVOA). A parallel version is also proposed in order to spread different coronavirus strains and achieve better results in less iterations.", "cite_spans": [], "ref_spans": [], "section": "Introduction"}, {"text": "The main CVOA advantages regarding other similar approaches can be summarized as follows:", "cite_spans": [], "ref_spans": [], "section": "Introduction"}, {"text": "1. Coronavirus statistics are known by the scientific community. In this sense, the rate of infection, the mortality rate or the re-infection probability are already known.", "cite_spans": [], "ref_spans": [], "section": "Introduction"}, {"text": "That is, CVOA is parametrized with actual values for rates and probabilities, preventing the user to perform an additional study on the most suitable setup configuration.", "cite_spans": [], "ref_spans": [], "section": "Introduction"}, {"text": "2. CVOA can stop the solutions exploration after several iterations, with no need to be configured. That is, the number of infected people increases during the first iterations, however, after a certain number of iterations, the number of infected people starts decreasing, until reaching a void infected set of individuals.", "cite_spans": [], "ref_spans": [], "section": "Introduction"}, {"text": "3. The coronavirus high spreading rate is useful for exploring promising regions more thoroughly (intensification) while the use of parallel strains ensures that all regions of the search space are evenly explored (diversification). 4 . Another relevant contribution of this work is the proposal of a new codification, discrete and of dynamic length, specifically designed for combining Long Short-Term Memory networks (LSTM) with CVOA (or any other metaheuristic).", "cite_spans": [{"start": 233, "end": 234, "text": "4", "ref_id": "BIBREF2"}], "ref_spans": [], "section": "Introduction"}, {"text": "As for the limitations of the current approach, there is mainly one. Since there is no vaccine currently, it has not been included in the procedure to reduce the number of individuals candidates to be infected. This fact involves an exponential increase of the infected population in the first iterations and, therefore, an exponential increase of the execution time for such iterations. This fact, however, is partially solved with the social isolation measures that simulate individuals that cannot be infected at a particular iteration.", "cite_spans": [], "ref_spans": [], "section": "Introduction"}, {"text": "A study case is included in this work to discuss the CVOA performance. CVOA has been used to find the optimal values for the hyperparameters of a LSTM architecture [17] , which is widely used model for artificial recurrent neural network (RNN), in the field of deep learning [8] . Data from the Spanish electricity consumption have been used to validate the accuracy. The results achieved verge on 0.45%, substantially outperforming other well-established methods such as random forest, gradient-boost trees, linear regression or deep learning optimized with other metaheuristics. The code, developed in Phyton with a discrete codification, is available in the supplementary material (along with an academic version in Java for a binary codification).", "cite_spans": [{"start": 164, "end": 168, "text": "[17]", "ref_id": "BIBREF15"}, {"start": 275, "end": 278, "text": "[8]", "ref_id": "BIBREF6"}], "ref_spans": [], "section": "Introduction"}, {"text": "Finally, it is acknowledged the need of further study on the performance of wellknown functions [16] , however, given the relevance of coronavirus is acquiring throughout the world (declared as pandemic by the World Health Organization) and the remarkable results achieved when combined with deep learning, it was wanted to share this work hoping it inspires future research in this direction.", "cite_spans": [{"start": 96, "end": 100, "text": "[16]", "ref_id": "BIBREF14"}], "ref_spans": [], "section": "Introduction"}, {"text": "The rest of the paper is organized as follows. Section 2 discusses related and recent works. The methodology proposed is introduced in Section 3. Section 4 proposes a discrete codification to hybridize deep learning models with CVOA and provides some illustrative cases. A preliminary analysis on how populations are created and evolved over time is discussed in Section 5. The results achieved are reported and discussed in Section 6. Finally, the conclusions drawn and future work suggestions are included in Section 7.", "cite_spans": [], "ref_spans": [], "section": "Introduction"}, {"text": "There are many bioinspired metaheuristics to solve optimization problems. Although CVOA has been conceived to optimize any kind of problems, this section focuses on optimization algorithms applied to hybridize deep learning models.", "cite_spans": [], "ref_spans": [], "section": "Related works"}, {"text": "It is hard to find consensus among the researchers on which method should be applied to which problem, and, for this reason, many optimization methods have been proposed during the last decade to improve deep learning models. Generally, the criterion for selecting a method is its associated performance from a wide variety of perspectives. Low computation cost, accuracy or even implementation difficulty can be accepted as one of these criteria.", "cite_spans": [], "ref_spans": [], "section": "Related works"}, {"text": "The Virus Optimization Algorithm (VOA) was proposed by Liang and Cuevas-Ju\u00e1rez in 2016 [18] and later improved in [19] . However, as many other metaheuristics, the results of its application are highly dependent on its initial configuration. Additionally, it simulates generic viruses, without adding individualized properties for particular viruses.", "cite_spans": [{"start": 87, "end": 91, "text": "[18]", "ref_id": "BIBREF16"}, {"start": 114, "end": 118, "text": "[19]", "ref_id": "BIBREF17"}], "ref_spans": [], "section": "Related works"}, {"text": "The results achieved indicate that its usefulness is beyond doubt.", "cite_spans": [], "ref_spans": [], "section": "Related works"}, {"text": "One of the most extended metaheuristics used to improve deep learning parameters is genetic algorithms (GA). Hence, a LSTM network optimized with GA can be found in [6] .", "cite_spans": [{"start": 165, "end": 168, "text": "[6]", "ref_id": "BIBREF4"}], "ref_spans": [], "section": "Related works"}, {"text": "To evaluate the proposed hybrid approach, the daily Korea Stock Price Index data were used, outperforming the benchmark model. In 2019, a network traffic prediction model based on LSTM and GA was proposed in [5] . The results were compared to pure LSTM and ARIMA, reporting higher accuracy.", "cite_spans": [{"start": 208, "end": 211, "text": "[5]", "ref_id": "BIBREF3"}], "ref_spans": [], "section": "Related works"}, {"text": "Multi-agents systems have also been applied to optimize deep learning models. The use of Particle Swarm Optimization (PSO) can be found in [20] . The authors proposed a model based on kernel principal component analysis and back propagation neural network with PSO for midterm power load forecasting. The hybridization of deep learning models with PSO was also explored in [13] but, this time, the authors applied the methodology with image classification purposes.", "cite_spans": [{"start": 139, "end": 143, "text": "[20]", "ref_id": "BIBREF18"}, {"start": 373, "end": 377, "text": "[13]", "ref_id": "BIBREF11"}], "ref_spans": [], "section": "Related works"}, {"text": "Ants colony optimization (ACO) models have also been used to hybridize deep learning. Thus, Desell et al. [9] proposed an evolving deep recurrent neural networks using ACO applied to the challenging task of predicting general aviation flight data. The work in [12] introduced a method based on ACO to optimize a LSTM recurrent neural networks. Again, the field of application was flight data records obtained from an airline containing flights that suffered from excessive vibration.", "cite_spans": [{"start": 106, "end": 109, "text": "[9]", "ref_id": "BIBREF7"}, {"start": 260, "end": 264, "text": "[12]", "ref_id": "BIBREF10"}], "ref_spans": [], "section": "Related works"}, {"text": "Some papers exploring the Cuckoo Search (CS) properties have been published recently as well. In [23] , CS was used to find suitable heuristics for adjusting the hyper-parameters of another LSTM network. The authors claimed an accuracy superior to 96% for all the datasets examined. Nawi et al. [22] proposed the use of CS to improve the training of RNN in order to achieve fast convergence and high accuracy. Results obtained outperformed those than other metaheuristics.", "cite_spans": [{"start": 97, "end": 101, "text": "[23]", "ref_id": "BIBREF21"}, {"start": 295, "end": 299, "text": "[22]", "ref_id": "BIBREF20"}], "ref_spans": [], "section": "Related works"}, {"text": "The use of the artificial bee colony (ABC) optimization algorithm applied to LSTM can also be found in the literature. Hence, and optimized LSTM with ABC to forecast the bitcoin price was introduced in [26] . The combination of ABC and RNN was also proposed in [3] for traffic volume forecasting. This time the results were compared to standard backpropagation models.", "cite_spans": [{"start": 202, "end": 206, "text": "[26]", "ref_id": "BIBREF24"}, {"start": 261, "end": 264, "text": "[3]", "ref_id": "BIBREF1"}], "ref_spans": [], "section": "Related works"}, {"text": "From the analysis of these works, it can be concluded that there is an increasing interest in using metaheuristics in LSTM models. However, not as many works as for artificial neural networks can be found in the literature and, none of them, based on a virus propagation model. These two facts, among others, justify the application of CVOA to optimize LSTM models.", "cite_spans": [], "ref_spans": [], "section": "Related works"}, {"text": "This section introduces the CVOA methodology. Thus, Section 3.1 describes the steps for a single strain. Section 3.2 introduces the modifications added to use CVOA as a parallel version. Section 3.3 suggests how parameters must be set. Section 3.4 shows the CVOA pseudo codes and comments them.", "cite_spans": [], "ref_spans": [], "section": "Methodology"}, {"text": "Step 1. Generation of the initial population. The initial population consists of one individual, the so-called patient-zero (P Z). As in the coronavirus epidemic, it identifies the first human being infected.", "cite_spans": [], "ref_spans": [], "section": "Steps"}, {"text": "Step 2. Disease propagation. Depending on the individual, several cases are evaluated:", "cite_spans": [], "ref_spans": [], "section": "Steps"}, {"text": "1. Some of the infected individuals die. They die according to the coronavirus death rate (P DIE). Such individuals can no longer infect new individuals.", "cite_spans": [], "ref_spans": [], "section": "Steps"}, {"text": "2. The individuals surviving the coronavirus will infect new individuals (intensification). Two types of spreading are considered, according to a given probability (P SU P ERSP READER):", "cite_spans": [], "ref_spans": [], "section": "Steps"}, {"text": "\u2022 Ordinary spreaders. Infected individuals will infect new ones according to the coronavirus spreading rate (SP READIN G RAT E).", "cite_spans": [], "ref_spans": [], "section": "Steps"}, {"text": "\u2022 Super-spreaders. Infected individuals will infect new ones according to the coronavirus superspreading rate (SU P ERSP READIN G RAT E).", "cite_spans": [], "ref_spans": [], "section": "Steps"}, {"text": "3. There is another consideration, since it is needed to ensure diversification. Both ordinary and super-spreaders individuals can travel and explore solutions quite dissimilar. Therefore, individuals have a probability of traveling (P T RAV EL) thus allowing to propagate the disease to solutions that may be quite different (T RAV ELER RAT E). In case of not being traveler, new solutions will change according to an ORDIN ARY RAT E. Note that one individual can be both superspreader and traveler.", "cite_spans": [], "ref_spans": [], "section": "Steps"}, {"text": "Step 3. Updating populations. Three populations are maintained and updated for each generation.", "cite_spans": [], "ref_spans": [], "section": "Steps"}, {"text": "1. Dead population. If any individual dies, it is added to this population and can never be used again.", "cite_spans": [], "ref_spans": [], "section": "Steps"}, {"text": "2. Recovered population. After each iteration, infected individuals (after spreading the coronavirus according to the previous step) are sent to the recovered population.", "cite_spans": [], "ref_spans": [], "section": "Steps"}, {"text": "It is known that there is a reinfection probability. Hence, an individual belonging to this population could be re-infected at any iteration provided that it meets the reinfection criterion (P REIN F ECT ION ). Another situation must be considered, since individuals can be isolated simulating they are implementing the social distancing measures. For the sake of simplicity, it is considered that an isolated individual is sent to the recovered population as well when meeting an isolation probability (P ISOLAT ION ).", "cite_spans": [], "ref_spans": [], "section": "Steps"}, {"text": "iteration, according the procedure described in the previous steps. It is possible that repeated new infected individuals are created at each iteration and, consequently, it is recommended to remove such repeated individuals from this population before the next iteration starts running. ", "cite_spans": [], "ref_spans": [], "section": "New infected population. This population gathers all individuals infected at each"}, {"text": "It must be noted that it is very simple to use CVOA in a multi-virus version since it can be implemented as a population-based algorithm, when considering the pandemic as a set of intelligent agents each of them evolving in parallel. In contrast to trajectory-based metaheuristics, population-based focuses on the diversification in the search space.", "cite_spans": [], "ref_spans": [], "section": "Remarks for a parallel CVOA version"}, {"text": "For this case, a new variable must be defined, strains, which will determine the number of strains that will be launched in parallel. Each strain could simulate different regions.", "cite_spans": [], "ref_spans": [], "section": "Remarks for a parallel CVOA version"}, {"text": "In other words, strains can be differently configured so that each of them intensifies with their own rates.", "cite_spans": [], "ref_spans": [], "section": "Remarks for a parallel CVOA version"}, {"text": "Several considerations must be done for this case:", "cite_spans": [], "ref_spans": [], "section": "Remarks for a parallel CVOA version"}, {"text": "1. Every strain is run independently, following the steps in the previous section.", "cite_spans": [], "ref_spans": [], "section": "Remarks for a parallel CVOA version"}, {"text": "A wise strategy should be followed to generate P Zs for each strain. For instance, it is suggested the generation of orthogonal P Zs or with high Hamming distances.", "cite_spans": [], "ref_spans": [], "section": "2."}, {"text": "That way, a wider search space could be covered, enhancing diversification.", "cite_spans": [], "ref_spans": [], "section": "2."}, {"text": "3. The interaction between the different strains is done by means of dead and recovered populations, which must be shared by all the strains. Operations over these populations must be handled as concurrent updates [11] . 4 . New infected populations, on the contrary, are different for each strain and no concurrent operations are required.", "cite_spans": [{"start": 214, "end": 218, "text": "[11]", "ref_id": "BIBREF9"}, {"start": 221, "end": 222, "text": "4", "ref_id": "BIBREF2"}], "ref_spans": [], "section": "2."}, {"text": "5. This version may help to simulate different rates for different strains. That way, if there is any initial information about the search space, some strains could be more focused on diversification and some others on intensification.", "cite_spans": [], "ref_spans": [], "section": "2."}, {"text": "Depending on the hardware resources and how busy they are, every strain may evolve at different speeds. This situation should not pose any problems since it is known that the pandemic evolves at different rates and starts at different time stamps depending on region of the world.", "cite_spans": [], "ref_spans": [], "section": "2."}, {"text": "Last, another application can be found for this parallel version. CVOA emulates an SIR model and consequently, any other global pandemic could be modeled by using the known rates of, for instance, the flu of 1918 or 1957, another coronavirus SARS or MERS, HIV, or Ebola. Hypothetically, parallel pandemics could be run with different rates.", "cite_spans": [], "ref_spans": [], "section": "2."}, {"text": "Since CVOA simulates the coronavirus disease propagation, most of the rates (propagation, re-infection or mortality) are already known. This fact prevents the research from wasting time in selecting values for such rates and turns the CVOA into metaheuristic quite easy to execute.", "cite_spans": [], "ref_spans": [], "section": "Suggested parameters setup"}, {"text": "However, it must be noted that the current rates are not definitive yet and it is expected they will vary over time, as the pandemic evolves. Maybe these values will not be stable until 2021 or even 2022. The suggested values have been retrieved from the World Health Organization [1] and are discussed below:", "cite_spans": [], "ref_spans": [], "section": "Suggested parameters setup"}, {"text": "1. P DIE. An infected individual can die with a given probability. Currently, this rate is set as almost 5% by the scientific community. Therefore, P DIE = 0.05.", "cite_spans": [], "ref_spans": [], "section": "Suggested parameters setup"}, {"text": "It is the probability that an individual spread the disease to a greater number of healthy individuals. It is known that this situation affects to a 10% of the population, therefore, P SU P ERSP READER = 0.1. After this condition is validated, two situations can be found:", "cite_spans": [], "ref_spans": [], "section": "P SU P ERSP READER."}, {"text": "\u2022 ORDIN ARY RAT E. If the infected individual is not a super-spreader, then the infection rate (also known as reproductive number, R 0 ) is 2.5. It is suggested that this rate varies from 0 to 5.", "cite_spans": [], "ref_spans": [], "section": "P SU P ERSP READER."}, {"text": "\u2022 SU P ERSP READER RAT E. If the infected individual turns out to be super-spreader, then he/she infects up to 15 healthy individuals on average. It is suggested that this rate varies from 6 to 15.", "cite_spans": [], "ref_spans": [], "section": "P SU P ERSP READER."}, {"text": "The current reported rate is 14%. Therefore, P REIN F ECT ION = 0.14.", "cite_spans": [], "ref_spans": [], "section": "P REIN F ECT ION . It is known that a recovered individual can be re-infected."}, {"text": "4. P ISOLAT ION . This value is uncertain because countries are taking different measures for social isolation. This parameter helps to reduce the exponential growth of the infected population after each iteration. Therefore, a high value must be assigned to this probability. It is suggested that P ISOLAT ION = 0.5.", "cite_spans": [], "ref_spans": [], "section": "P REIN F ECT ION . It is known that a recovered individual can be re-infected."}, {"text": "any place in the world and can infect healthy individuals. It is known that almost a 10% of the population travel during a week (simulated time for every iteration), so P T RAV EL = 0.1. 6 . P AN DEM IC DU RAT ION . This parameter simulates the duration of the pandemic. Since the estimated recovering time is one week, each iteration simulates one week. Currently, this data is unknown so this number can be adjusted to the size of the problem. It is suggested that P AN DEM IC DU RAT ION = 30. 7 . strains. This parameter should be adjusted according to the size of the problem and the hardware availability, and it is difficult to suggest a value suitable for all situations. But a tentative initial value could be five, in an attempt to simulate one different strain per continent. Therefore, strains = 5. Another important decision that must be made is how to initialize every P Z associated with the strains. When just one strain is considered, P Z is suggested to be randomly initialized. However, with strains > 1 the user should search for orthogonal P Zs and to uniformly distribute them in the search space. This strategy should help to cover bigger search spaces in less iterations and to evaluate individuals with maximal distances.", "cite_spans": [{"start": 187, "end": 188, "text": "6", "ref_id": "BIBREF4"}, {"start": 496, "end": 497, "text": "7", "ref_id": "BIBREF5"}], "ref_spans": [], "section": "P T RAV EL. This probability simulates how an infected individual can travel to"}, {"text": "This section provides the pseudo code of the most relevant functions for the CVOA, along with some comments to better understand them.", "cite_spans": [], "ref_spans": [], "section": "Pseudo codes"}, {"text": "This is the main function and its pseudo code can be found in Algorithm 1. Once the new population is formed, qll individuals are evaluated and if any of them outperforms the best current one, the latter is updated. dead \u2190 die(infectedPopulation) 12: for all i \u2208 inf ectedP opulation do 13: aux \u2190 infect(i,recovered,dead) 14: if notnull(aux) then 15: newInfectedPopulation \u2190 aux 16: end if 17: end for 18: currentBestIndividual \u2190 selectBestIndividual(newInfectedPopulation) 19: if fitness(currentBestIndividual) > bestIndividual then 20: bestIndividual \u2190 currentBestIndividual 21: end if 22: recovered \u2190 infectedPopulation 23: clear(infectedPopulation) 24: infectedPopulation \u2190 newInfectedPopulation ", "cite_spans": [{"start": 247, "end": 250, "text": "12:", "ref_id": null}, {"start": 287, "end": 290, "text": "13:", "ref_id": null}, {"start": 322, "end": 325, "text": "14:", "ref_id": null}, {"start": 347, "end": 350, "text": "15:", "ref_id": null}, {"start": 379, "end": 382, "text": "16:", "ref_id": null}, {"start": 390, "end": 393, "text": "17:", "ref_id": null}, {"start": 402, "end": 405, "text": "18:", "ref_id": null}, {"start": 474, "end": 477, "text": "19:", "ref_id": null}, {"start": 534, "end": 537, "text": "20:", "ref_id": null}, {"start": 577, "end": 580, "text": "21:", "ref_id": null}, {"start": 588, "end": 591, "text": "22:", "ref_id": null}, {"start": 623, "end": 626, "text": "23:", "ref_id": null}, {"start": 653, "end": 656, "text": "24:", "ref_id": null}], "ref_spans": [], "section": "Function CV OA"}, {"text": "Given an infected individual this function generates new infected individuals, according to the spreading and traveling rates. This function also controls that the new infected individuals are not already in the dead list (in such case this new infection is ignored) or in the recovered list (in such case the P REIN F ECT ION is applied to determine whether the individual is re-infected or if it remains in the recovered list). Additionally, it considers that the new potential infected individual might be isolated, which is controlled by P ISOLAT ION . Although the use of an extra list could be implemented, it has been decided to treat these individuals as recovered. Therefore, if an isolated individual is attempted to be infected, it is added to the recovered list.", "cite_spans": [], "ref_spans": [], "section": "Function newInf ection"}, {"text": "The effective generation of the new infected individuals must be carried in the function replicate, whose pseudo code is not provided because it depends on the codification and the nature of the problem to be optimized. This function must return a set of new infected individuals, according to the aforementioned rates. Specific information on how this codification and replication is done for LSTM models.", "cite_spans": [], "ref_spans": [], "section": "Function newInf ection"}, {"text": "The pseudo code for the described procedure can be found in Algorithm 3. ", "cite_spans": [], "ref_spans": [], "section": "Function newInf ection"}, {"text": "This is an auxiliary function used to find the best fitness in a list of infected individuals.", "cite_spans": [], "ref_spans": [], "section": "Function selectBestIndividual"}, {"text": "Its peudo code is shown in Algorithm 5. if fitness(i) > bestFitness then 6: bestFitness \u2190 fitness(i) ", "cite_spans": [{"start": 73, "end": 75, "text": "6:", "ref_id": null}], "ref_spans": [], "section": "Function selectBestIndividual"}, {"text": "The PZ, as it has been described previously, is the individual of the first iteration in the CVOA algorithm. Following the hybridization proposed, a random individual is created considering the codification defined above.", "cite_spans": [], "ref_spans": [], "section": "PZ generation"}, {"text": "In first place, a random value for the learning rate of the PZ is generated. Specifically, a number between 0 and 5 is generated randomly in a uniform distribution. Such limits are indicated in Figure 1 , according to the possible encoded values of the learning rate element. The same process is carried out to produce a random value for the dropout element. In such case, a random number between 0 and 8 is generated.", "cite_spans": [], "ref_spans": [{"start": 194, "end": 202, "text": "Figure 1", "ref_id": "FIGREF2"}], "section": "PZ generation"}, {"text": "In second place, a random number of layers is generated for the element L of P Z.", "cite_spans": [], "ref_spans": [], "section": "PZ generation"}, {"text": "Such number of layers is a random number between 2 and 11. Note that the first layer is reserved for the input layer of the neural network, as it has been discussed before.", "cite_spans": [], "ref_spans": [], "section": "PZ generation"}, {"text": "In last place, for each one of the L layers, a random number of units is generated between 0 and 11, covering the possible encoded values for the number of units previously defined (see Figure 1 ).", "cite_spans": [], "ref_spans": [{"start": 186, "end": 194, "text": "Figure 1", "ref_id": "FIGREF2"}], "section": "PZ generation"}, {"text": "The infection procedure described here corresponds to the functionality of replicate(), introduced in the line 4 of the Algorithm 3. This procedure takes an individual as input and returns an infected individual according to the following procedure.", "cite_spans": [], "ref_spans": [], "section": "Infection procedure"}, {"text": "The first step is to determine the element L of the infected individual that will be mutated. The probability of such mutation occurs has been set to 1 3 so that every element has the same probability to mutate. If the mutation occurs, then the element L of the individual is modified according to the process described in Section 4.4.", "cite_spans": [], "ref_spans": [], "section": "Infection procedure"}, {"text": "If the element L (the number of layers of the network) changes, then the elements encoding the different layers within the individual (LAYER 1, ..., LAYER L) must be resized accordingly. Such resizing process is explained in Section 4.3.", "cite_spans": [], "ref_spans": [], "section": "Infection procedure"}, {"text": "The second step is to determine how many elements of the individual will be infected.", "cite_spans": [], "ref_spans": [], "section": "Infection procedure"}, {"text": "If the T RAV ELER RAT E < 0, then the number of infected elements is generated randomly from 0 to the length of the individual (excluding the element L). Else, the T RAV ELER RAT E indicates itself the number of infected elements. ", "cite_spans": [], "ref_spans": [], "section": "Infection procedure"}, {"text": "When an individual is infected at the position of the element L, the list of elements that encodes the number of units per layer (LAYER 1, ..., LAYER L) must be resized accordingly.", "cite_spans": [], "ref_spans": [], "section": "Individual resizing process"}, {"text": "In the case that the new number of layers after the infection is lower than its previous value, then the last leftover elements are removed. For instance, if the initial individual is ", "cite_spans": [], "ref_spans": [], "section": "Individual resizing process"}, {"text": "The process carried out to change the value of a specific element of an individual is described in this section.", "cite_spans": [], "ref_spans": [], "section": "Single position mutation"}, {"text": "First, a signed change amount C \u2208 {\u22122, \u22121, +1, +2} is randomly determined using the following criteria. A random real number P between 0 and 1 is generated using a uniform distribution. If P < 0.25, then the change amount will be C = \u22122. Else if P < 0.5, then the change amount will be C = \u22121. Else if P < 0.75, then the change amount will be C = +1. Else, the change amount will be C = +2.", "cite_spans": [], "ref_spans": [], "section": "Single position mutation"}, {"text": "Once the amount of change is determined, the new value for the infected element is computed. If its previous value is V , then the new value after the single position mutation will be V = V + C. If the new value V exceeds the limits defined for the individual codification, such value is set to the maximum or minimum allowed value accordingly.", "cite_spans": [], "ref_spans": [], "section": "Single position mutation"}, {"text": "This section provides an overview on how populations evolve over time, and how the search space is explored to reach the optimum value for a given fitness function.", "cite_spans": [], "ref_spans": [], "section": "CVOA preliminary analysis"}, {"text": "To conduct this experimentation, a simple binary codification has been used. The fitness function was f (x) = (x \u2212 15) 2 because to goal of this section is to evaluate the growth of the new infected populations, and not to the find challenging optimum values.", "cite_spans": [], "ref_spans": [], "section": "CVOA preliminary analysis"}, {"text": "This function reaches the minimum value at x = 15, that is, f (15) = 0.", "cite_spans": [], "ref_spans": [], "section": "CVOA preliminary analysis"}, {"text": "For this reason, individuals with 10, 20, 30, 40 and 50 bits have been tested. Tables 1-5 summarize the results achieved for each of these lengths, respectively. Every experiment has been launched 50 times, determining that, on average, the optimum value was found for 11, 12, 14, 15 and 17 iterations, respectively. Each table shows the results of an execution meeting this criterion. Table 6 summarizes the amount of search space explored, on average, before finding the optimum value. For a small space of 2 10 = 1024 possible values, the optimum one is reached after exploring 15.6250% valid solutions. However, this value acutely decreases as ", "cite_spans": [], "ref_spans": [{"start": 79, "end": 89, "text": "Tables 1-5", "ref_id": "TABREF2"}, {"start": 386, "end": 393, "text": "Table 6", "ref_id": "TABREF7"}], "section": "CVOA preliminary analysis"}, {"text": "This section reports the results achieved by hybridizing a deep learning model with CVOA. gorithm. Section 6.2 describes the dataset used. Section 6.3 discusses the results achieved and includes some comparative methods.", "cite_spans": [], "ref_spans": [], "section": "Results"}, {"text": "The forecasting of future values fascinates the human being. To be able to understand how certain variables evolve over time has many benefits in many fields.", "cite_spans": [], "ref_spans": [], "section": "Study case: electricity demand time series forecasting"}, {"text": "Electricity demand forecasting is not an exception, since there is a real need for planning the amount to be generated or, in some countries, to be bought.", "cite_spans": [], "ref_spans": [], "section": "Study case: electricity demand time series forecasting"}, {"text": "The use of machine learning to forecast such time series has been intensive during the last years [21] . But, with the development of deep learning models, and, in particular of LSTM, much research is being conducted in this application field [2] .", "cite_spans": [{"start": 98, "end": 102, "text": "[21]", "ref_id": "BIBREF19"}, {"start": 243, "end": 246, "text": "[2]", "ref_id": "BIBREF0"}], "ref_spans": [], "section": "Study case: electricity demand time series forecasting"}, {"text": "The time series considered in this study is related to the electricity consumption in Spain from January 2007 to June 2016, the same as used in [24] . It is a time series composed of 9 years and 6 months with a 10-minute sampling frequency, resulting in 497832 measures.", "cite_spans": [{"start": 144, "end": 148, "text": "[24]", "ref_id": "BIBREF22"}], "ref_spans": [], "section": "Dataset description"}, {"text": "As in the original paper, the prediction horizon is 24, that is, this is a multi-step strategy with h = 24. The size of samples used for the prediction of these 24 values is 168. Furthermore, the dataset was split into 70% for the training set and 30% for the test set, and in addition, a 30% of the training set has also been selected for the validation set, in order to find the optimal parameters. The training set covers the period from January ", "cite_spans": [], "ref_spans": [], "section": "Dataset description"}, {"text": "This section reports the results obtained by hybridizing LSTM with CVOA, by means of the codification proposed in Section 4, to forecast the Spanish electricity dataset described in Section 6.2.", "cite_spans": [], "ref_spans": [], "section": "Performance analysis"}, {"text": "Linear regression (LR), decision tree (DT), gradient-boosted trees (GBT) and random forest (RF) models have been used with a parametrization setups according to those studied in [15, 14] . A deep neural network optimized with a grid search (DNN-GS)", "cite_spans": [{"start": 178, "end": 182, "text": "[15,", "ref_id": "BIBREF13"}, {"start": 183, "end": 186, "text": "14]", "ref_id": "BIBREF12"}], "ref_spans": [], "section": "Performance analysis"}, {"text": "according to [24] has also been applied. Another deep neural network, but optimized with random search (DNN-RS) and smoothed with a low-pass filter (DNN-RS-LP) [25] , has also been applied. Furthermore, CVOA has been combined with DNN (DNN-CVOA), using the same codification as in LSTM.", "cite_spans": [{"start": 13, "end": 17, "text": "[24]", "ref_id": "BIBREF22"}, {"start": 160, "end": 164, "text": "[25]", "ref_id": "BIBREF23"}], "ref_spans": [], "section": "Performance analysis"}, {"text": "These results along with those of LSTM, and combinations with GS, RS, RS-LP and CVOA are summarized in Table 7 , expressed in terms of the mean absolute percentage error (MAPE). It can be observed that LSTM-CVOA outperforms all evaluated methods which have showed particularly remarkable performance for this real-world dataset.", "cite_spans": [], "ref_spans": [{"start": 103, "end": 110, "text": "Table 7", "ref_id": "TABREF10"}], "section": "Performance analysis"}, {"text": "Additionally, DNN-CVOA outperforms all other DNN configurations which confirms the superiority of CVOA with reference to GS, RS, and RS-LP.", "cite_spans": [], "ref_spans": [], "section": "Performance analysis"}, {"text": "Another relevant consideration that must be taken into account is that the compared methods generated 24 independent models, each of them for every value forming h. So, it would expected that LSTM-CVOA performance increases if independent models are generated for each of the values in h. These results have been achieved with the individual {4, 0, 8}{9, 7, 2, 7, 2, 7, 10, 7}, which decoded involves the following architecture parameters:", "cite_spans": [], "ref_spans": [], "section": "Performance analysis"}, {"text": "\u2022 Learning rate: 10E-04.", "cite_spans": [], "ref_spans": [], "section": "Performance analysis"}, {"text": "\u2022 Dropout: 0.", "cite_spans": [], "ref_spans": [], "section": "Performance analysis"}, {"text": "\u2022 Number of layers: 8.", "cite_spans": [], "ref_spans": [], "section": "Performance analysis"}, {"text": "\u2022 Units per layer: [250, 200, 75, 200, 75, 200, 275, 200] Finally, Figure 4 depicts the first five predicted days versus their actual values, expressed in watts.", "cite_spans": [{"start": 19, "end": 24, "text": "[250,", "ref_id": null}, {"start": 25, "end": 29, "text": "200,", "ref_id": null}, {"start": 30, "end": 33, "text": "75,", "ref_id": null}, {"start": 34, "end": 38, "text": "200,", "ref_id": null}, {"start": 39, "end": 42, "text": "75,", "ref_id": null}, {"start": 43, "end": 47, "text": "200,", "ref_id": null}, {"start": 48, "end": 52, "text": "275,", "ref_id": null}, {"start": 53, "end": 57, "text": "200]", "ref_id": null}], "ref_spans": [{"start": 67, "end": 75, "text": "Figure 4", "ref_id": "FIGREF0"}], "section": "Performance analysis"}, {"text": "This work has introduced a novel bioinspired metaheuristic, based on the coronavirus behavior. On the one hand, CVOA has two major advantages. First, its highly relation to the coronavirus spreading model, prevents the authors to make any decision about the inputs' values. Second, it ends after a certain number of iterations due to the exchange of individuals between healthy and dead/recovered lists. Additionally, a novel discrete Additional experimentation must be conducted in order to assess its performance on standard F functions and find out the search space shapes in which it can be more effective.", "cite_spans": [], "ref_spans": [], "section": "Conclusions and future works"}, {"text": "Some actions must be taken to reduce the size of the infected population after several iterations, that grows exponentially. In this sense, a vaccine must be implemented. This case would involve adding to the recovered list, at a given V ACCIN E RAT E healthy individuals. This rate will remain unknown until a vaccine is developed.", "cite_spans": [], "ref_spans": [], "section": "Conclusions and future works"}, {"text": "Another suggested research line is using dynamic rates. For instance, the observation of the preliminary effects of the social isolation measures in countries like China, Italy or Spain, suggests that the IN F ECT RAT E could be simulated as a Poisson process, but more time and country recoveries is required to confirm this trend.", "cite_spans": [], "ref_spans": [], "section": "Conclusions and future works"}, {"text": "Finally, for the multi-step forecasting problem analyzed, it would be desirable to generate independent models for each of the values that form the prediction horizon h.", "cite_spans": [], "ref_spans": [], "section": "Conclusions and future works"}, {"text": "Along with this paper, an academic version in Java for a binary codification is provided, with a simple fitness function (https://github.com/DataLabUPO/CVOA_academic). Additionally, the code in Phyton for the deep learning approach is also provided, with a more complex codification and the suggested implementation, according to the pseudocode provided (https://github.com/DataLabUPO/CVOA_LSTM).", "cite_spans": [], "ref_spans": [], "section": "Supplementary material"}], "bib_entries": {"BIBREF0": {"ref_id": "b0", "title": "Deep learning framework to forecast electricity demand", "authors": [{"first": "J", "middle": [], "last": "Bedi", "suffix": ""}, {"first": "D", "middle": [], "last": "", "suffix": ""}], "year": 2019, "venue": "Applied Energy", "volume": "238", "issn": "", "pages": "1312--1326", "other_ids": {}}, "BIBREF1": {"ref_id": "b1", "title": "Recurrent Neural Network Training using ABC Algorithm for Traffic Volume Prediction", "authors": [{"first": "A", "middle": [], "last": "Bosire", "suffix": ""}], "year": 2019, "venue": "Informatica", "volume": "43", "issn": "", "pages": "551--559", "other_ids": {}}, "BIBREF2": {"ref_id": "b2", "title": "Learnheuristics: Hybridizing metaheuristics with machine learning for optimization with dynamic inputs", "authors": [{"first": "L", "middle": [], "last": "Calvet", "suffix": ""}, {"first": "J", "middle": ["D"], "last": "Armas", "suffix": ""}, {"first": "D", "middle": [], "last": "Masip", "suffix": ""}, {"first": "A", "middle": ["A"], "last": "Juan", "suffix": ""}], "year": 2017, "venue": "Mathematics Open", "volume": "15", "issn": "", "pages": "261--280", "other_ids": {}}, "BIBREF3": {"ref_id": "b3", "title": "Network Traffic Prediction Based on LSTM Networks with Genetic Algorithm", "authors": [{"first": "J", "middle": [], "last": "Chen", "suffix": ""}, {"first": "H", "middle": [], "last": "Xing", "suffix": ""}, {"first": "H", "middle": [], "last": "Yang", "suffix": ""}, {"first": "L", "middle": [], "last": "Xu", "suffix": ""}], "year": 2019, "venue": "Lecture Notes in Electrical Engineering", "volume": "550", "issn": "", "pages": "411--419", "other_ids": {}}, "BIBREF4": {"ref_id": "b4", "title": "Genetic Algorithm-Optimized Long Short-Term Memory Network for Stock Market Prediction", "authors": [{"first": "H", "middle": [], "last": "Chung", "suffix": ""}, {"first": "K.-S", "middle": [], "last": "Shin", "suffix": ""}], "year": 2018, "venue": "Sustainability", "volume": "10", "issn": "10", "pages": "", "other_ids": {}}, "BIBREF5": {"ref_id": "b5", "title": "A survey of swarm and evolutionary computing approaches for deep learning", "authors": [{"first": "A", "middle": [], "last": "Darwish", "suffix": ""}, {"first": "A", "middle": ["E"], "last": "Hassanien", "suffix": ""}, {"first": "S", "middle": [], "last": "Das", "suffix": ""}], "year": 2020, "venue": "Artificial Intelligence Review", "volume": "53", "issn": "3", "pages": "1767--1812", "other_ids": {}}, "BIBREF6": {"ref_id": "b6", "title": "Deep learning on big, sparse, behavioral data", "authors": [{"first": "S", "middle": [], "last": "De-Cnudde", "suffix": ""}, {"first": "Y", "middle": [], "last": "Ramon", "suffix": ""}, {"first": "D", "middle": [], "last": "Martens", "suffix": ""}, {"first": "F", "middle": [], "last": "Provost", "suffix": ""}], "year": 2019, "venue": "Big Data", "volume": "7", "issn": "4", "pages": "286--307", "other_ids": {}}, "BIBREF7": {"ref_id": "b7", "title": "Evolving deep recurrent neural networks using ant colony optimization", "authors": [{"first": "T", "middle": [], "last": "Desell", "suffix": ""}, {"first": "S", "middle": [], "last": "Clachar", "suffix": ""}, {"first": "J", "middle": [], "last": "Higgins", "suffix": ""}, {"first": "B", "middle": [], "last": "Wild", "suffix": ""}], "year": 2015, "venue": "Lecture Notes in Computer Science", "volume": "9026", "issn": "", "pages": "86--98", "other_ids": {}}, "BIBREF8": {"ref_id": "b8", "title": "Review of meta-heuristic optimization based artificial neural networks and its applications", "authors": [{"first": "D", "middle": [], "last": "Devikanniga", "suffix": ""}, {"first": "K", "middle": [], "last": "Vetrivel", "suffix": ""}, {"first": "N", "middle": [], "last": "Badrinath", "suffix": ""}], "year": 2019, "venue": "Journal of Physics: Conference Series", "volume": "1362", "issn": "1", "pages": "", "other_ids": {}}, "BIBREF9": {"ref_id": "b9", "title": "Transforming Finance Into Vision", "authors": [{"first": "V", "middle": [], "last": "Dhar", "suffix": ""}, {"first": "C", "middle": [], "last": "Sun", "suffix": ""}, {"first": "P", "middle": [], "last": "Batra", "suffix": ""}], "year": 2019, "venue": "Concurrent Financial Time Series as Convolutional Net. Big Data", "volume": "7", "issn": "", "pages": "276--285", "other_ids": {}}, "BIBREF10": {"ref_id": "b10", "title": "Using ant colony optimization to optimize long short-term memory recurrent neural networks", "authors": [{"first": "A", "middle": [], "last": "Elsaid", "suffix": ""}, {"first": "F", "middle": [], "last": "Eljamiy", "suffix": ""}, {"first": "J", "middle": [], "last": "Higgings", "suffix": ""}, {"first": "B", "middle": [], "last": "Wild", "suffix": ""}, {"first": "B", "middle": [], "last": "Wild", "suffix": ""}, {"first": "T", "middle": [], "last": "Desell", "suffix": ""}], "year": 2018, "venue": "Proceedings of the Genetic and Evolutionary Computation Conference", "volume": "", "issn": "", "pages": "13--20", "other_ids": {}}, "BIBREF11": {"ref_id": "b11", "title": "Particle swarm optimization of deep neural networks architectures for image classification. Swarm and Evolutionary Computation", "authors": [{"first": "F", "middle": ["E"], "last": "Fernandes-Junior", "suffix": ""}, {"first": "G", "middle": ["G"], "last": "Yen", "suffix": ""}], "year": 2019, "venue": "", "volume": "49", "issn": "", "pages": "62--74", "other_ids": {}}, "BIBREF12": {"ref_id": "b12", "title": "Multi-step forecasting for big data time series based on ensemble learning. Knowledge-Based Systems", "authors": [{"first": "A", "middle": [], "last": "Galicia", "suffix": ""}, {"first": "R", "middle": ["L"], "last": "Talavera-Llames", "suffix": ""}, {"first": "A", "middle": [], "last": "Troncoso", "suffix": ""}, {"first": "I", "middle": [], "last": "Koprinska", "suffix": ""}, {"first": "F", "middle": [], "last": "Mart\u00ednez-Alvarez", "suffix": ""}], "year": 2019, "venue": "", "volume": "163", "issn": "", "pages": "830--841", "other_ids": {}}, "BIBREF13": {"ref_id": "b13", "title": "Scalable forecasting techniques applied to big electricity time series", "authors": [{"first": "A", "middle": [], "last": "Galicia", "suffix": ""}, {"first": "J", "middle": ["F"], "last": "Torres", "suffix": ""}, {"first": "F", "middle": [], "last": "Mart\u00ednez-\u00c1lvarez", "suffix": ""}, {"first": "A", "middle": [], "last": "Troncoso", "suffix": ""}], "year": 2019, "venue": "Lecture Notes in Computer Science", "volume": "10306", "issn": "", "pages": "165--175", "other_ids": {}}, "BIBREF14": {"ref_id": "b14", "title": "Handbook of metaheuristics", "authors": [{"first": "F", "middle": [], "last": "Glover", "suffix": ""}, {"first": "G", "middle": ["A"], "last": "Kochenberger", "suffix": ""}], "year": 2003, "venue": "", "volume": "", "issn": "", "pages": "", "other_ids": {}}, "BIBREF15": {"ref_id": "b15", "title": "Stock Market Prediction Using Optimized Deep-ConvLSTM Model", "authors": [{"first": "A", "middle": [], "last": "Kelotra", "suffix": ""}, {"first": "P", "middle": [], "last": "Pandey", "suffix": ""}], "year": 2020, "venue": "Big Data", "volume": "8", "issn": "1", "pages": "5--24", "other_ids": {}}, "BIBREF16": {"ref_id": "b16", "title": "A novel metaheuristic for continuous optimization problems: Virus optimization algorithm. Engineering Optimization", "authors": [{"first": "Y", "middle": ["C"], "last": "Liang", "suffix": ""}, {"first": "J", "middle": ["R"], "last": "Cuevas-Ju\u00e1rez", "suffix": ""}], "year": 2016, "venue": "", "volume": "48", "issn": "", "pages": "73--93", "other_ids": {}}, "BIBREF17": {"ref_id": "b17", "title": "A self-adaptive virus optimization algorithm for continuous optimization problems", "authors": [{"first": "Y", "middle": ["C"], "last": "Liang", "suffix": ""}, {"first": "J", "middle": ["R"], "last": "Cuevas-Ju\u00e1rez", "suffix": ""}], "year": 2020, "venue": "", "volume": "", "issn": "", "pages": "", "other_ids": {}}, "BIBREF18": {"ref_id": "b18", "title": "Midterm power load forecasting model based on kernel principal component analysis and back propagation neural network with particle swarm optimization", "authors": [{"first": "Zhao", "middle": [], "last": "Liu", "suffix": ""}, {"first": "Xincheng", "middle": [], "last": "Sun", "suffix": ""}, {"first": "Shuai", "middle": [], "last": "Wang", "suffix": ""}, {"first": "Mengjiao", "middle": [], "last": "Pan", "suffix": ""}, {"first": "Yue", "middle": [], "last": "Zhang", "suffix": ""}, {"first": "Zhendong", "middle": [], "last": "Ji", "suffix": ""}], "year": 2019, "venue": "Big Data", "volume": "7", "issn": "2", "pages": "130--138", "other_ids": {}}, "BIBREF19": {"ref_id": "b19", "title": "A survey on data mining techniques applied to electricity-related time series forecasting", "authors": [{"first": "F", "middle": [], "last": "Mart\u00ednez-\u00c1lvarez", "suffix": ""}, {"first": "A", "middle": [], "last": "Troncoso", "suffix": ""}, {"first": "G", "middle": [], "last": "Asencio-Cort\u00e9s", "suffix": ""}, {"first": "J", "middle": ["C"], "last": "Riquelme", "suffix": ""}], "year": 2015, "venue": "Energies", "volume": "8", "issn": "11", "pages": "13162--13193", "other_ids": {}}, "BIBREF20": {"ref_id": "b20", "title": "A New Optimized Cuckoo Search Recurrent Neural Network (CSRNN)", "authors": [{"first": "N", "middle": ["M"], "last": "Nawi", "suffix": ""}, {"first": "A", "middle": [], "last": "Khan", "suffix": ""}, {"first": "M", "middle": ["Z"], "last": "Rehman", "suffix": ""}], "year": 2014, "venue": "Proceedings of the International Conference on Robotic, Vision, Signal Processing & Power Applications", "volume": "", "issn": "", "pages": "335--341", "other_ids": {}}, "BIBREF21": {"ref_id": "b21", "title": "Auto Tuning of RNN Hyper-parameters using Cuckoo Search Algorithm", "authors": [{"first": "D", "middle": [], "last": "Srivastava", "suffix": ""}, {"first": "Y", "middle": [], "last": "Singh", "suffix": ""}, {"first": "A", "middle": [], "last": "Sahoo", "suffix": ""}], "year": 2019, "venue": "Proceedings of the International Conference on Contemporary Computing", "volume": "", "issn": "", "pages": "1--5", "other_ids": {}}, "BIBREF22": {"ref_id": "b22", "title": "A scalable approach based on deep learning for big data time series forecasting", "authors": [{"first": "J", "middle": ["F"], "last": "Torres", "suffix": ""}, {"first": "A", "middle": [], "last": "Galicia", "suffix": ""}, {"first": "A", "middle": [], "last": "Troncoso", "suffix": ""}, {"first": "F", "middle": [], "last": "Mart\u00ednez-\u00c1lvarez", "suffix": ""}], "year": 2018, "venue": "Integrated Computer-Aided Engineering", "volume": "25", "issn": "4", "pages": "335--348", "other_ids": {}}, "BIBREF23": {"ref_id": "b23", "title": "Random hyper-parameter search-based deep neural network for power consumption forecasting", "authors": [{"first": "J", "middle": ["F"], "last": "Torres", "suffix": ""}, {"first": "D", "middle": [], "last": "Guti\u00e9rrez-Avil\u00e9s", "suffix": ""}, {"first": "A", "middle": [], "last": "Troncoso", "suffix": ""}, {"first": "F", "middle": [], "last": "Mart\u00ednez-\u00c1lvarez", "suffix": ""}], "year": 2019, "venue": "Lecture Notes in Computer Science", "volume": "11506", "issn": "", "pages": "259--269", "other_ids": {}}, "BIBREF24": {"ref_id": "b24", "title": "Artificial Bee Colony-Optimized LSTM for Bitcoin Price Prediction", "authors": [{"first": "A", "middle": ["D"], "last": "Yuliyono", "suffix": ""}, {"first": "A", "middle": ["S"], "last": "Girsang", "suffix": ""}], "year": 2019, "venue": "Technology and Engineering Systems Journal", "volume": "4", "issn": "5", "pages": "375--383", "other_ids": {}}}, "ref_entries": {"FIGREF0": {"text": "Stop criterion. One of the most interesting features of the proposed approach lies on its ability to end without the need of controlling any parameter. This situation occurs because the recovered and dead populations are constantly growing as time goes by, and the new infected population cannot infect new individuals. It is expected that the number of infected individuals increases for a certain number of iterations. However, from a particular iteration on, the size of the new infected population will be smaller than that of the current one because recovered and dead populations are too big, and the size of the infected population decays over time. Additionally, a preset number of iterations (P AN DEM IC DU RAT ION ) can be added to the stop criterion. The social isolation measures also contributes to reaching the stop criterion.", "latex": null, "type": "figure"}, "FIGREF1": {"text": "Four lists must be maintained: dead, recovered, infected (the current set of infected individuals) and new infected individuals (the set of new infected individuals, generated by the spreading of the coronavirus from the current infected individuals). The initial population is generated by means of the patient zero (P Z), which is a random solution. The number of iterations is controlled by the main loop, evaluating the duration of the pandemic (preset value) and if there is still any infected individual. In this loop, every individual can either die (it is sent to the dead list) or infect, thus enlarging the size of the new infected population. How this infection is made, is implemented in function inf ect (see Section 3.4.2).", "latex": null, "type": "figure"}, "FIGREF2": {"text": "Function cvoa 1: define infectedPopulation, newInfectedPopulation as set of Individual 2: define dead, recovered as list of Individual 3: define PZ, bestIndividual, currentBestIndividual, aux as Individual 4: define time as integer 5: define bestSolutionFitness, currentbestFitness as real 6: time \u2190 0 7: PZ \u2190 InfectPatientZero() 8: infectedPopulation \u2190 PZ 9: bestIndividual \u2190 PZ 10: while time < EP IDEM IC DU RAT ION AN D sizeof (infectedPopulation) > 0 do 11:", "latex": null, "type": "figure"}, "FIGREF3": {"text": "receives an infected individual and returns the set of new infected individuals. Two additional lists, recovered and dead, are also received as input parameters since they must be updated after the evaluation of every infected individuals. The pseudo code is shown in Algorithm 2. Two conditions are evaluated to determine the number of new infected individuals (use of SP READER RAT E or SU P ERSP READER RAT E) or how different the new individuals will be (ORDIN ARY RAT E or T RAV ELER RAT E. The implementation on how these new infected individuals are encoded according to such rates is carried out in the function newInf ection.", "latex": null, "type": "figure"}, "FIGREF4": {"text": "Function selectBestIndividual Require: infectedPopulation as list of Individual 1: define bestIndividual as Individual 2: define bestFitness as real 3: bestFitness \u2190 M IN V ALU E 4: for all i \u2208 infectedPopulation do 5:", "latex": null, "type": "figure"}, "FIGREF5": {"text": "deep learning with CVOAThis section describes the codification proposed for an individual, in order to hybridize deep learning with CVOA. The term hybridize is used in this context as the combination of two computational techniques (deep learning and CVOA) so that the best hyperparameter values are discovered. This strategy is very common in machine learning for optimizing models during the training process[4,7,10].Hence, the individual codification shown inFigure 1has been implemented in order to apply CVOA to optimize deep neural network architectures. Individual codification for hybridizing deep learning architectures using the proposed CVOA algorithm.As it can be seen inFigure 1, each individual is composed of the following elements.The element LR encodes the learning rate used in the neural network algorithm. It can take a value from 0 to 5 and its corresponding decoded values are 0, 0.1, 0.01, 0.001, 0.0001 and 0.00001. The element DROP encodes the dropout rate applied to the neural network. It can take values from 0 to 8 that correspond to 0, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40 and 0.45, respectively. The dropout rate is distributed uniformly for all the layers of the network. That is, if the dropout is 0.4 and the network has 4 layers, then the 10% (0.1) of the neurons of each layer will be removed. The element L of the individual stores the number of layers of the network. It is restricted to 1 < L \u2264 11. The first layer is referred to the input layer of the neural network. The rest of layers are hidden layers. The output layer is excluded from the codification. Therefore, the optimized network can contain from 1 to 10 hidden layers. The proposed individual codification has a variable size. Thus, its size depends on the number of layers indicated in the element L. Consequently, a list of elements (LAYER 1, ..., LAYER L) are also included in the individual, which encode the number of units (neurons) for each network layer. Each of these elements can take values from 0 to 11, and their corresponding decoded values range from 25 to 300, with a step of 25.", "latex": null, "type": "figure"}, "FIGREF6": {"text": "As third step, once it is determined the number of infected elements of the individual, a list of random positions is generated. For example, if three positions of the individual must be changed, then the random positions affected could be, for instance, whose referred to the elements {DROP, LAYER 2, LAYER 4}. Finally, the selected positions of the individual are mutated. Such mutation is described in Section 4.4.", "latex": null, "type": "figure"}, "FIGREF7": {"text": "4}{3, 2, 1, 6} (four layers), the element L = 4 is infected and the new value is L = 2, then the resulting individual will be {2, 0, 2}{3, 2}. In the case that the new number of layers after the infection is higher than its previous value, the new random elements are added at the end of the individual. For instance, if the initial individual is {2, 0, 4}{3, 2, 1, 6} (four layers), the element L = 4 is infected and the new value is L = 6, then the resulting individual could be {2, 0, 6}{3, 2, 1, 6, 0, 4}.", "latex": null, "type": "figure"}, "FIGREF8": {"text": "illustrates how the new infected population evolves over time for the 20-bit codification case with the suggested parameters initialization. The number of new people increases until a given iteration in which it starts to decrease. Note that data shown in", "latex": null, "type": "figure"}, "FIGREF9": {"text": "Number of new infected individuals for a 20-bit binary codification execution. the figure are sampled every five iterations.Finally,Figure 3shows the number of recovered and dead people. These two curves accumulate these numbers since dead and recovered people are sent to their respective lists and are no longer infected (except for those in recovered that can be reinfected for a its given probability P REIN F ECT ION ). The final number of recovered is 92826 and of dead people 5335, being 94.56% and 5.44%, respectively.", "latex": null, "type": "figure"}, "FIGREF10": {"text": "Total number of recover and dead people for a 20-bit binary codification execution.", "latex": null, "type": "figure"}, "FIGREF11": {"text": "Actual versus predicted values for the first five days in the test set (in watts). and dynamic codification has been proposed to hybridize deep learning models. On the other hand, it exhibits some limitations. Such is the case for the exponential growth of the infected population as time (iterations) goes by.Furthermore, a parallel version is proposed so that CVOA is easily transformed into a multi-virus metaheuristic, in which different coronavirus strains search for the best solution in a collaborative way. This fact allows to model every strain with different initial setups (higher DEAT H RAT E, for instance), sharing recovered or dead lists.", "latex": null, "type": "figure"}, "TABREF0": {"text": "Algorithm 2 Function infect Require: infected as of Individual; recovered, dead as list of Individual 1: define R1, R2 as real 2: define newInfected as list of Individual SU P ERSP READER RAT E, ORDIN ARY RAT E) if R2 < P SU P ERSP READER then 13: newInfected \u2190 newInfection (infected, recovered, dead, SP READER RAT E, T RAV ELER RAT E) SU P ERSP READER RAT E, T RAV ELER RAT E)", "latex": null, "type": "table"}, "TABREF1": {"text": "Require: infected as Individual; recovered, dead as list of Individual 1: define R3, R4 as real 2: define newInfected as list of Individual This function is called from the main function. It evaluates all individuals in the infected population and determines whether they die or not, according to the given P D IE. Those meeting this condition, are sent to the dead list. Algorithm 4 describes this procedure.", "latex": null, "type": "table"}, "TABREF2": {"text": "Sample execution for a 10-bit binary codification.", "latex": null, "type": "table"}, "TABREF3": {"text": "", "latex": null, "type": "table"}, "TABREF4": {"text": "", "latex": null, "type": "table"}, "TABREF5": {"text": "", "latex": null, "type": "table"}, "TABREF6": {"text": "", "latex": null, "type": "table"}, "TABREF7": {"text": "Search space explored for a binary codification with different individuals length.", "latex": null, "type": "table", "html": "<html><body><table><tr><td>Length </td><td>Search space </td><td>Evaluated </td><td>Evaluated (%)\n</td></tr><tr><td>10 </td><td>1024 </td><td>160 </td><td>15.62500000%\n</td></tr><tr><td>20 </td><td>1048576 </td><td>2253 </td><td>0.21486282%\n</td></tr><tr><td>30 </td><td>1073741824 </td><td>15589 </td><td>0.00145184%\n</td></tr><tr><td>40 </td><td>1,09951E+12 </td><td>170827 </td><td>0.00001554%\n</td></tr><tr><td>50 </td><td>1,1259E+15 </td><td>219613 </td><td>0.00000002%\n</td></tr></table></body></html>"}, "TABREF8": {"text": "Section 6.1 describes the study case selected to prove the effectiveness of the proposed al-", "latex": null, "type": "table"}, "TABREF10": {"text": "Results in terms of MAPE for CVOA-LSTM compared to other well established methods.", "latex": null, "type": "table", "html": "<html><body><table><tr><td>Method </td><td>MAPE (%)\n</td></tr><tr><td>LR </td><td>7.34\n</td></tr><tr><td>DT </td><td>2.88\n</td></tr><tr><td>GBT </td><td>2.72\n</td></tr><tr><td>RF </td><td>2.20\n</td></tr><tr><td>DNN-GS </td><td>1.68\n</td></tr><tr><td>DNN-RS </td><td>1.57\n</td></tr><tr><td>DNN-RS-LP </td><td>1.36\n</td></tr><tr><td>DNN-CVOA </td><td>1.18\n</td></tr><tr><td>LSTM-GS </td><td>1.22\n</td></tr><tr><td>LSTM-RS </td><td>0.84\n</td></tr><tr><td>LSTM-RS-LP </td><td>0.82\n</td></tr><tr><td>LSTM-CVOA </td><td>0.47\n</td></tr></table></body></html>"}}, "back_matter": [{"text": "The authors would like to thank the Spanish Ministry of Economy and Competitiveness for the support under project TIN2017-88209-C2.", "cite_spans": [], "ref_spans": [], "section": "Acknowledgments"}]}